/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataCurvePt } from './DataCurvePt';
import {
    DataCurvePtFromJSON,
    DataCurvePtFromJSONTyped,
    DataCurvePtToJSON,
} from './DataCurvePt';

/**
 * 
 * @export
 * @interface IcuAchievement
 */
export interface IcuAchievement {
    /**
     * 
     * @type {string}
     * @memberof IcuAchievement
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IcuAchievement
     */
    type?: IcuAchievementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof IcuAchievement
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof IcuAchievement
     */
    watts?: number;
    /**
     * 
     * @type {number}
     * @memberof IcuAchievement
     */
    secs?: number;
    /**
     * 
     * @type {number}
     * @memberof IcuAchievement
     */
    value?: number;
    /**
     * 
     * @type {number}
     * @memberof IcuAchievement
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof IcuAchievement
     */
    pace?: number;
    /**
     * 
     * @type {DataCurvePt}
     * @memberof IcuAchievement
     */
    point?: DataCurvePt;
}


/**
 * @export
 */
export const IcuAchievementTypeEnum = {
    BestPower: 'BEST_POWER',
    FtpUp: 'FTP_UP',
    LthrUp: 'LTHR_UP',
    BestPace: 'BEST_PACE'
} as const;
export type IcuAchievementTypeEnum = typeof IcuAchievementTypeEnum[keyof typeof IcuAchievementTypeEnum];


/**
 * Check if a given object implements the IcuAchievement interface.
 */
export function instanceOfIcuAchievement(value: object): value is IcuAchievement {
    return true;
}

export function IcuAchievementFromJSON(json: any): IcuAchievement {
    return IcuAchievementFromJSONTyped(json, false);
}

export function IcuAchievementFromJSONTyped(json: any, ignoreDiscriminator: boolean): IcuAchievement {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'message': json['message'] == null ? undefined : json['message'],
        'watts': json['watts'] == null ? undefined : json['watts'],
        'secs': json['secs'] == null ? undefined : json['secs'],
        'value': json['value'] == null ? undefined : json['value'],
        'distance': json['distance'] == null ? undefined : json['distance'],
        'pace': json['pace'] == null ? undefined : json['pace'],
        'point': json['point'] == null ? undefined : DataCurvePtFromJSON(json['point']),
    };
}

export function IcuAchievementToJSON(value?: IcuAchievement | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': value['type'],
        'message': value['message'],
        'watts': value['watts'],
        'secs': value['secs'],
        'value': value['value'],
        'distance': value['distance'],
        'pace': value['pace'],
        'point': DataCurvePtToJSON(value['point']),
    };
}

