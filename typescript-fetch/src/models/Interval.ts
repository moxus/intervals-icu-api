/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Interval
 */
export interface Interval {
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    startIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    movingTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    elapsedTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageWatts?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageWattsAlt?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageWattsAltAcc?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    minWatts?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    maxWatts?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageWattsKg?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    maxWattsKg?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    intensity?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    w5sVariability?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    weightedAverageWatts?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    trainingLoad?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    joules?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    joulesAboveFtp?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    decoupling?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    avgLrBalance?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageDfaA1?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageRespiration?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageEpoc?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    wbalStart?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    wbalEnd?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    zone?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    zoneMinWatts?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    zoneMaxWatts?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageSpeed?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    minSpeed?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    maxSpeed?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    gap?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageHeartrate?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    minHeartrate?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    maxHeartrate?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageCadence?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    minCadence?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    maxCadence?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageTorque?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    minTorque?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    maxTorque?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    totalElevationGain?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    minAltitude?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    maxAltitude?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageGradient?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageSmo2?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageThb?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageSmo22?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageThb2?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Interval
     */
    type?: IntervalTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    endIndex?: number;
    /**
     * 
     * @type {string}
     * @memberof Interval
     */
    groupId?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Interval
     */
    segmentEffortIds?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    startTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    endTime?: number;
    /**
     * 
     * @type {string}
     * @memberof Interval
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof Interval
     */
    averageStride?: number;
}


/**
 * @export
 */
export const IntervalTypeEnum = {
    Recovery: 'RECOVERY',
    Work: 'WORK'
} as const;
export type IntervalTypeEnum = typeof IntervalTypeEnum[keyof typeof IntervalTypeEnum];


/**
 * Check if a given object implements the Interval interface.
 */
export function instanceOfInterval(value: object): value is Interval {
    return true;
}

export function IntervalFromJSON(json: any): Interval {
    return IntervalFromJSONTyped(json, false);
}

export function IntervalFromJSONTyped(json: any, ignoreDiscriminator: boolean): Interval {
    if (json == null) {
        return json;
    }
    return {
        
        'startIndex': json['start_index'] == null ? undefined : json['start_index'],
        'distance': json['distance'] == null ? undefined : json['distance'],
        'movingTime': json['moving_time'] == null ? undefined : json['moving_time'],
        'elapsedTime': json['elapsed_time'] == null ? undefined : json['elapsed_time'],
        'averageWatts': json['average_watts'] == null ? undefined : json['average_watts'],
        'averageWattsAlt': json['average_watts_alt'] == null ? undefined : json['average_watts_alt'],
        'averageWattsAltAcc': json['average_watts_alt_acc'] == null ? undefined : json['average_watts_alt_acc'],
        'minWatts': json['min_watts'] == null ? undefined : json['min_watts'],
        'maxWatts': json['max_watts'] == null ? undefined : json['max_watts'],
        'averageWattsKg': json['average_watts_kg'] == null ? undefined : json['average_watts_kg'],
        'maxWattsKg': json['max_watts_kg'] == null ? undefined : json['max_watts_kg'],
        'intensity': json['intensity'] == null ? undefined : json['intensity'],
        'w5sVariability': json['w5s_variability'] == null ? undefined : json['w5s_variability'],
        'weightedAverageWatts': json['weighted_average_watts'] == null ? undefined : json['weighted_average_watts'],
        'trainingLoad': json['training_load'] == null ? undefined : json['training_load'],
        'joules': json['joules'] == null ? undefined : json['joules'],
        'joulesAboveFtp': json['joules_above_ftp'] == null ? undefined : json['joules_above_ftp'],
        'decoupling': json['decoupling'] == null ? undefined : json['decoupling'],
        'avgLrBalance': json['avg_lr_balance'] == null ? undefined : json['avg_lr_balance'],
        'averageDfaA1': json['average_dfa_a1'] == null ? undefined : json['average_dfa_a1'],
        'averageRespiration': json['average_respiration'] == null ? undefined : json['average_respiration'],
        'averageEpoc': json['average_epoc'] == null ? undefined : json['average_epoc'],
        'wbalStart': json['wbal_start'] == null ? undefined : json['wbal_start'],
        'wbalEnd': json['wbal_end'] == null ? undefined : json['wbal_end'],
        'zone': json['zone'] == null ? undefined : json['zone'],
        'zoneMinWatts': json['zone_min_watts'] == null ? undefined : json['zone_min_watts'],
        'zoneMaxWatts': json['zone_max_watts'] == null ? undefined : json['zone_max_watts'],
        'averageSpeed': json['average_speed'] == null ? undefined : json['average_speed'],
        'minSpeed': json['min_speed'] == null ? undefined : json['min_speed'],
        'maxSpeed': json['max_speed'] == null ? undefined : json['max_speed'],
        'gap': json['gap'] == null ? undefined : json['gap'],
        'averageHeartrate': json['average_heartrate'] == null ? undefined : json['average_heartrate'],
        'minHeartrate': json['min_heartrate'] == null ? undefined : json['min_heartrate'],
        'maxHeartrate': json['max_heartrate'] == null ? undefined : json['max_heartrate'],
        'averageCadence': json['average_cadence'] == null ? undefined : json['average_cadence'],
        'minCadence': json['min_cadence'] == null ? undefined : json['min_cadence'],
        'maxCadence': json['max_cadence'] == null ? undefined : json['max_cadence'],
        'averageTorque': json['average_torque'] == null ? undefined : json['average_torque'],
        'minTorque': json['min_torque'] == null ? undefined : json['min_torque'],
        'maxTorque': json['max_torque'] == null ? undefined : json['max_torque'],
        'totalElevationGain': json['total_elevation_gain'] == null ? undefined : json['total_elevation_gain'],
        'minAltitude': json['min_altitude'] == null ? undefined : json['min_altitude'],
        'maxAltitude': json['max_altitude'] == null ? undefined : json['max_altitude'],
        'averageGradient': json['average_gradient'] == null ? undefined : json['average_gradient'],
        'averageSmo2': json['average_smo2'] == null ? undefined : json['average_smo2'],
        'averageThb': json['average_thb'] == null ? undefined : json['average_thb'],
        'averageSmo22': json['average_smo2_2'] == null ? undefined : json['average_smo2_2'],
        'averageThb2': json['average_thb_2'] == null ? undefined : json['average_thb_2'],
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'endIndex': json['end_index'] == null ? undefined : json['end_index'],
        'groupId': json['group_id'] == null ? undefined : json['group_id'],
        'segmentEffortIds': json['segment_effort_ids'] == null ? undefined : json['segment_effort_ids'],
        'startTime': json['start_time'] == null ? undefined : json['start_time'],
        'endTime': json['end_time'] == null ? undefined : json['end_time'],
        'label': json['label'] == null ? undefined : json['label'],
        'averageStride': json['average_stride'] == null ? undefined : json['average_stride'],
    };
}

export function IntervalToJSON(value?: Interval | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'start_index': value['startIndex'],
        'distance': value['distance'],
        'moving_time': value['movingTime'],
        'elapsed_time': value['elapsedTime'],
        'average_watts': value['averageWatts'],
        'average_watts_alt': value['averageWattsAlt'],
        'average_watts_alt_acc': value['averageWattsAltAcc'],
        'min_watts': value['minWatts'],
        'max_watts': value['maxWatts'],
        'average_watts_kg': value['averageWattsKg'],
        'max_watts_kg': value['maxWattsKg'],
        'intensity': value['intensity'],
        'w5s_variability': value['w5sVariability'],
        'weighted_average_watts': value['weightedAverageWatts'],
        'training_load': value['trainingLoad'],
        'joules': value['joules'],
        'joules_above_ftp': value['joulesAboveFtp'],
        'decoupling': value['decoupling'],
        'avg_lr_balance': value['avgLrBalance'],
        'average_dfa_a1': value['averageDfaA1'],
        'average_respiration': value['averageRespiration'],
        'average_epoc': value['averageEpoc'],
        'wbal_start': value['wbalStart'],
        'wbal_end': value['wbalEnd'],
        'zone': value['zone'],
        'zone_min_watts': value['zoneMinWatts'],
        'zone_max_watts': value['zoneMaxWatts'],
        'average_speed': value['averageSpeed'],
        'min_speed': value['minSpeed'],
        'max_speed': value['maxSpeed'],
        'gap': value['gap'],
        'average_heartrate': value['averageHeartrate'],
        'min_heartrate': value['minHeartrate'],
        'max_heartrate': value['maxHeartrate'],
        'average_cadence': value['averageCadence'],
        'min_cadence': value['minCadence'],
        'max_cadence': value['maxCadence'],
        'average_torque': value['averageTorque'],
        'min_torque': value['minTorque'],
        'max_torque': value['maxTorque'],
        'total_elevation_gain': value['totalElevationGain'],
        'min_altitude': value['minAltitude'],
        'max_altitude': value['maxAltitude'],
        'average_gradient': value['averageGradient'],
        'average_smo2': value['averageSmo2'],
        'average_thb': value['averageThb'],
        'average_smo2_2': value['averageSmo22'],
        'average_thb_2': value['averageThb2'],
        'id': value['id'],
        'type': value['type'],
        'end_index': value['endIndex'],
        'group_id': value['groupId'],
        'segment_effort_ids': value['segmentEffortIds'],
        'start_time': value['startTime'],
        'end_time': value['endTime'],
        'label': value['label'],
        'average_stride': value['averageStride'],
    };
}

