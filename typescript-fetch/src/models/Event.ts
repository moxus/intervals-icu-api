/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
} from './Attachment';
import type { PushError } from './PushError';
import {
    PushErrorFromJSON,
    PushErrorFromJSONTyped,
    PushErrorToJSON,
} from './PushError';

/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    startDateLocal?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    icuTrainingLoad?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    icuAtl?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    icuCtl?: number;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    calendarId?: number;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    athleteId?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    category?: EventCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    endDateLocal?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    indoor?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    color?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    movingTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    icuFtp?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    atlDays?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    ctlDays?: number;
    /**
     * 
     * @type {Date}
     * @memberof Event
     */
    updated?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    notOnFitnessChart?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    showAsNote?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    showOnCtlLine?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    target?: EventTargetEnum;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    joules?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    joulesAboveFtp?: number;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Event
     */
    workoutDoc?: { [key: string]: object; };
    /**
     * 
     * @type {Array<PushError>}
     * @memberof Event
     */
    pushErrors?: Array<PushError>;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    athleteCannotEdit?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    hideFromAthlete?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    structureReadOnly?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    createdById?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    sharedEventId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Event
     */
    entered?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Event
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof Event
     */
    attachments?: Array<Attachment>;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    oauthClientId?: number;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    externalId?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    loadTarget?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    timeTarget?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    distanceTarget?: number;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    planAthleteId?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    planFolderId?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    planWorkoutId?: number;
    /**
     * 
     * @type {Date}
     * @memberof Event
     */
    planApplied?: Date;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    icuIntensity?: number;
}


/**
 * @export
 */
export const EventCategoryEnum = {
    Workout: 'WORKOUT',
    RaceA: 'RACE_A',
    RaceB: 'RACE_B',
    RaceC: 'RACE_C',
    Note: 'NOTE',
    Holiday: 'HOLIDAY',
    Sick: 'SICK',
    Injured: 'INJURED',
    SetEftp: 'SET_EFTP',
    FitnessDays: 'FITNESS_DAYS',
    SeasonStart: 'SEASON_START',
    Target: 'TARGET',
    SetFitness: 'SET_FITNESS'
} as const;
export type EventCategoryEnum = typeof EventCategoryEnum[keyof typeof EventCategoryEnum];

/**
 * @export
 */
export const EventTargetEnum = {
    Auto: 'AUTO',
    Power: 'POWER',
    Hr: 'HR',
    Pace: 'PACE'
} as const;
export type EventTargetEnum = typeof EventTargetEnum[keyof typeof EventTargetEnum];


/**
 * Check if a given object implements the Event interface.
 */
export function instanceOfEvent(value: object): value is Event {
    return true;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'startDateLocal': json['start_date_local'] == null ? undefined : json['start_date_local'],
        'icuTrainingLoad': json['icu_training_load'] == null ? undefined : json['icu_training_load'],
        'icuAtl': json['icu_atl'] == null ? undefined : json['icu_atl'],
        'icuCtl': json['icu_ctl'] == null ? undefined : json['icu_ctl'],
        'type': json['type'] == null ? undefined : json['type'],
        'calendarId': json['calendar_id'] == null ? undefined : json['calendar_id'],
        'uid': json['uid'] == null ? undefined : json['uid'],
        'athleteId': json['athlete_id'] == null ? undefined : json['athlete_id'],
        'category': json['category'] == null ? undefined : json['category'],
        'endDateLocal': json['end_date_local'] == null ? undefined : json['end_date_local'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'indoor': json['indoor'] == null ? undefined : json['indoor'],
        'color': json['color'] == null ? undefined : json['color'],
        'movingTime': json['moving_time'] == null ? undefined : json['moving_time'],
        'icuFtp': json['icu_ftp'] == null ? undefined : json['icu_ftp'],
        'atlDays': json['atl_days'] == null ? undefined : json['atl_days'],
        'ctlDays': json['ctl_days'] == null ? undefined : json['ctl_days'],
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'notOnFitnessChart': json['not_on_fitness_chart'] == null ? undefined : json['not_on_fitness_chart'],
        'showAsNote': json['show_as_note'] == null ? undefined : json['show_as_note'],
        'showOnCtlLine': json['show_on_ctl_line'] == null ? undefined : json['show_on_ctl_line'],
        'target': json['target'] == null ? undefined : json['target'],
        'joules': json['joules'] == null ? undefined : json['joules'],
        'joulesAboveFtp': json['joules_above_ftp'] == null ? undefined : json['joules_above_ftp'],
        'workoutDoc': json['workout_doc'] == null ? undefined : json['workout_doc'],
        'pushErrors': json['push_errors'] == null ? undefined : ((json['push_errors'] as Array<any>).map(PushErrorFromJSON)),
        'athleteCannotEdit': json['athlete_cannot_edit'] == null ? undefined : json['athlete_cannot_edit'],
        'hideFromAthlete': json['hide_from_athlete'] == null ? undefined : json['hide_from_athlete'],
        'structureReadOnly': json['structure_read_only'] == null ? undefined : json['structure_read_only'],
        'createdById': json['created_by_id'] == null ? undefined : json['created_by_id'],
        'sharedEventId': json['shared_event_id'] == null ? undefined : json['shared_event_id'],
        'entered': json['entered'] == null ? undefined : json['entered'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(AttachmentFromJSON)),
        'oauthClientId': json['oauth_client_id'] == null ? undefined : json['oauth_client_id'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'loadTarget': json['load_target'] == null ? undefined : json['load_target'],
        'timeTarget': json['time_target'] == null ? undefined : json['time_target'],
        'distanceTarget': json['distance_target'] == null ? undefined : json['distance_target'],
        'planAthleteId': json['plan_athlete_id'] == null ? undefined : json['plan_athlete_id'],
        'planFolderId': json['plan_folder_id'] == null ? undefined : json['plan_folder_id'],
        'planWorkoutId': json['plan_workout_id'] == null ? undefined : json['plan_workout_id'],
        'planApplied': json['plan_applied'] == null ? undefined : (new Date(json['plan_applied'])),
        'distance': json['distance'] == null ? undefined : json['distance'],
        'icuIntensity': json['icu_intensity'] == null ? undefined : json['icu_intensity'],
    };
}

export function EventToJSON(value?: Event | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'start_date_local': value['startDateLocal'],
        'icu_training_load': value['icuTrainingLoad'],
        'icu_atl': value['icuAtl'],
        'icu_ctl': value['icuCtl'],
        'type': value['type'],
        'calendar_id': value['calendarId'],
        'uid': value['uid'],
        'athlete_id': value['athleteId'],
        'category': value['category'],
        'end_date_local': value['endDateLocal'],
        'name': value['name'],
        'description': value['description'],
        'indoor': value['indoor'],
        'color': value['color'],
        'moving_time': value['movingTime'],
        'icu_ftp': value['icuFtp'],
        'atl_days': value['atlDays'],
        'ctl_days': value['ctlDays'],
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString()),
        'not_on_fitness_chart': value['notOnFitnessChart'],
        'show_as_note': value['showAsNote'],
        'show_on_ctl_line': value['showOnCtlLine'],
        'target': value['target'],
        'joules': value['joules'],
        'joules_above_ftp': value['joulesAboveFtp'],
        'workout_doc': value['workoutDoc'],
        'push_errors': value['pushErrors'] == null ? undefined : ((value['pushErrors'] as Array<any>).map(PushErrorToJSON)),
        'athlete_cannot_edit': value['athleteCannotEdit'],
        'hide_from_athlete': value['hideFromAthlete'],
        'structure_read_only': value['structureReadOnly'],
        'created_by_id': value['createdById'],
        'shared_event_id': value['sharedEventId'],
        'entered': value['entered'],
        'tags': value['tags'],
        'attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(AttachmentToJSON)),
        'oauth_client_id': value['oauthClientId'],
        'external_id': value['externalId'],
        'load_target': value['loadTarget'],
        'time_target': value['timeTarget'],
        'distance_target': value['distanceTarget'],
        'plan_athlete_id': value['planAthleteId'],
        'plan_folder_id': value['planFolderId'],
        'plan_workout_id': value['planWorkoutId'],
        'plan_applied': value['planApplied'] == null ? undefined : ((value['planApplied']).toISOString()),
        'distance': value['distance'],
        'icu_intensity': value['icuIntensity'],
    };
}

