/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActivityCharts } from './ActivityCharts';
import {
    ActivityChartsFromJSON,
    ActivityChartsFromJSONTyped,
    ActivityChartsToJSON,
} from './ActivityCharts';
import type { PowerModel } from './PowerModel';
import {
    PowerModelFromJSON,
    PowerModelFromJSONTyped,
    PowerModelToJSON,
} from './PowerModel';
import type { Display } from './Display';
import {
    DisplayFromJSON,
    DisplayFromJSONTyped,
    DisplayToJSON,
} from './Display';

/**
 * 
 * @export
 * @interface SportSettings
 */
export interface SportSettings {
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    athleteId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SportSettings
     */
    types?: Array<SportSettingsTypesEnum>;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    warmupTime?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    cooldownTime?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    ftp?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    indoorFtp?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    wPrime?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof SportSettings
     */
    powerZones?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    sweetSpotMin?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    sweetSpotMax?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    powerSpikeThreshold?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SportSettings
     */
    powerZoneNames?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    ftpEstMinSecs?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SportSettings
     */
    useLapsForPowerIntervals?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SportSettings
     */
    keepAllLapsForPowerIntervals?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    afterKj0?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    afterKj1?: number;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    powerField?: string;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    lthr?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    maxHr?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof SportSettings
     */
    hrZones?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SportSettings
     */
    hrZoneNames?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    hrLoadType?: SportSettingsHrLoadTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    hrrcMinPercent?: number;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    thresholdPace?: number;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    paceUnits?: SportSettingsPaceUnitsEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof SportSettings
     */
    paceZones?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SportSettings
     */
    paceZoneNames?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    paceLoadType?: SportSettingsPaceLoadTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    gapModel?: SportSettingsGapModelEnum;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    elevationCorrection?: SportSettingsElevationCorrectionEnum;
    /**
     * 
     * @type {boolean}
     * @memberof SportSettings
     */
    useGapZoneTimes?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof SportSettings
     */
    bestEffortDistances?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    paceCurveStart?: number;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    loadOrder?: SportSettingsLoadOrderEnum;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    tizOrder?: SportSettingsTizOrderEnum;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    workoutOrder?: SportSettingsWorkoutOrderEnum;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    intervalDisplay?: SportSettingsIntervalDisplayEnum;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    defaultGearId?: string;
    /**
     * 
     * @type {string}
     * @memberof SportSettings
     */
    defaultIndoorGearId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SportSettings
     */
    extractWorkouts?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SportSettings
     */
    showPauses?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SportSettings
     */
    ignoreVelocity?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SportSettings
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SportSettings
     */
    updated?: Date;
    /**
     * 
     * @type {PowerModel}
     * @memberof SportSettings
     */
    mmpModel?: PowerModel;
    /**
     * 
     * @type {Display}
     * @memberof SportSettings
     */
    display?: Display;
    /**
     * 
     * @type {Array<number>}
     * @memberof SportSettings
     */
    activityFieldIds?: Array<number>;
    /**
     * 
     * @type {ActivityCharts}
     * @memberof SportSettings
     */
    activityCharts?: ActivityCharts;
    /**
     * 
     * @type {boolean}
     * @memberof SportSettings
     */
    other?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SportSettings
     */
    iseFTPSupported?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SportSettings
     */
    useDistanceForIntervals?: boolean;
}


/**
 * @export
 */
export const SportSettingsTypesEnum = {
    Ride: 'Ride',
    Run: 'Run',
    Swim: 'Swim',
    WeightTraining: 'WeightTraining',
    Hike: 'Hike',
    Walk: 'Walk',
    AlpineSki: 'AlpineSki',
    BackcountrySki: 'BackcountrySki',
    Badminton: 'Badminton',
    Canoeing: 'Canoeing',
    Crossfit: 'Crossfit',
    EBikeRide: 'EBikeRide',
    EMountainBikeRide: 'EMountainBikeRide',
    Elliptical: 'Elliptical',
    Golf: 'Golf',
    GravelRide: 'GravelRide',
    Handcycle: 'Handcycle',
    HighIntensityIntervalTraining: 'HighIntensityIntervalTraining',
    Hockey: 'Hockey',
    IceSkate: 'IceSkate',
    InlineSkate: 'InlineSkate',
    Kayaking: 'Kayaking',
    Kitesurf: 'Kitesurf',
    MountainBikeRide: 'MountainBikeRide',
    NordicSki: 'NordicSki',
    OpenWaterSwim: 'OpenWaterSwim',
    Padel: 'Padel',
    Pilates: 'Pilates',
    Pickleball: 'Pickleball',
    Racquetball: 'Racquetball',
    Rugby: 'Rugby',
    RockClimbing: 'RockClimbing',
    RollerSki: 'RollerSki',
    Rowing: 'Rowing',
    Sail: 'Sail',
    Skateboard: 'Skateboard',
    Snowboard: 'Snowboard',
    Snowshoe: 'Snowshoe',
    Soccer: 'Soccer',
    Squash: 'Squash',
    StairStepper: 'StairStepper',
    StandUpPaddling: 'StandUpPaddling',
    Surfing: 'Surfing',
    TableTennis: 'TableTennis',
    Tennis: 'Tennis',
    TrailRun: 'TrailRun',
    Transition: 'Transition',
    Velomobile: 'Velomobile',
    VirtualRide: 'VirtualRide',
    VirtualRow: 'VirtualRow',
    VirtualRun: 'VirtualRun',
    WaterSport: 'WaterSport',
    Wheelchair: 'Wheelchair',
    Windsurf: 'Windsurf',
    Workout: 'Workout',
    Yoga: 'Yoga',
    Other: 'Other'
} as const;
export type SportSettingsTypesEnum = typeof SportSettingsTypesEnum[keyof typeof SportSettingsTypesEnum];

/**
 * @export
 */
export const SportSettingsHrLoadTypeEnum = {
    AvgHr: 'AVG_HR',
    HrZones: 'HR_ZONES',
    Hrss: 'HRSS'
} as const;
export type SportSettingsHrLoadTypeEnum = typeof SportSettingsHrLoadTypeEnum[keyof typeof SportSettingsHrLoadTypeEnum];

/**
 * @export
 */
export const SportSettingsPaceUnitsEnum = {
    Secs100M: 'SECS_100M',
    Secs100Y: 'SECS_100Y',
    MinsKm: 'MINS_KM',
    MinsMile: 'MINS_MILE',
    Secs500M: 'SECS_500M'
} as const;
export type SportSettingsPaceUnitsEnum = typeof SportSettingsPaceUnitsEnum[keyof typeof SportSettingsPaceUnitsEnum];

/**
 * @export
 */
export const SportSettingsPaceLoadTypeEnum = {
    Swim: 'SWIM',
    Run: 'RUN'
} as const;
export type SportSettingsPaceLoadTypeEnum = typeof SportSettingsPaceLoadTypeEnum[keyof typeof SportSettingsPaceLoadTypeEnum];

/**
 * @export
 */
export const SportSettingsGapModelEnum = {
    None: 'NONE',
    StravaRun: 'STRAVA_RUN'
} as const;
export type SportSettingsGapModelEnum = typeof SportSettingsGapModelEnum[keyof typeof SportSettingsGapModelEnum];

/**
 * @export
 */
export const SportSettingsElevationCorrectionEnum = {
    No: 'NO',
    Auto: 'AUTO',
    Yes: 'YES'
} as const;
export type SportSettingsElevationCorrectionEnum = typeof SportSettingsElevationCorrectionEnum[keyof typeof SportSettingsElevationCorrectionEnum];

/**
 * @export
 */
export const SportSettingsLoadOrderEnum = {
    PowerHrPace: 'POWER_HR_PACE',
    PowerPaceHr: 'POWER_PACE_HR',
    HrPowerPace: 'HR_POWER_PACE',
    HrPacePower: 'HR_PACE_POWER',
    PacePowerHr: 'PACE_POWER_HR',
    PaceHrPower: 'PACE_HR_POWER'
} as const;
export type SportSettingsLoadOrderEnum = typeof SportSettingsLoadOrderEnum[keyof typeof SportSettingsLoadOrderEnum];

/**
 * @export
 */
export const SportSettingsTizOrderEnum = {
    PowerHrPace: 'POWER_HR_PACE',
    PowerPaceHr: 'POWER_PACE_HR',
    HrPowerPace: 'HR_POWER_PACE',
    HrPacePower: 'HR_PACE_POWER',
    PacePowerHr: 'PACE_POWER_HR',
    PaceHrPower: 'PACE_HR_POWER'
} as const;
export type SportSettingsTizOrderEnum = typeof SportSettingsTizOrderEnum[keyof typeof SportSettingsTizOrderEnum];

/**
 * @export
 */
export const SportSettingsWorkoutOrderEnum = {
    PowerHrPace: 'POWER_HR_PACE',
    PowerPaceHr: 'POWER_PACE_HR',
    HrPowerPace: 'HR_POWER_PACE',
    HrPacePower: 'HR_PACE_POWER',
    PacePowerHr: 'PACE_POWER_HR',
    PaceHrPower: 'PACE_HR_POWER'
} as const;
export type SportSettingsWorkoutOrderEnum = typeof SportSettingsWorkoutOrderEnum[keyof typeof SportSettingsWorkoutOrderEnum];

/**
 * @export
 */
export const SportSettingsIntervalDisplayEnum = {
    PowerHrPace: 'POWER_HR_PACE',
    PowerPaceHr: 'POWER_PACE_HR',
    HrPowerPace: 'HR_POWER_PACE',
    HrPacePower: 'HR_PACE_POWER',
    PacePowerHr: 'PACE_POWER_HR',
    PaceHrPower: 'PACE_HR_POWER'
} as const;
export type SportSettingsIntervalDisplayEnum = typeof SportSettingsIntervalDisplayEnum[keyof typeof SportSettingsIntervalDisplayEnum];


/**
 * Check if a given object implements the SportSettings interface.
 */
export function instanceOfSportSettings(value: object): value is SportSettings {
    return true;
}

export function SportSettingsFromJSON(json: any): SportSettings {
    return SportSettingsFromJSONTyped(json, false);
}

export function SportSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SportSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'athleteId': json['athlete_id'] == null ? undefined : json['athlete_id'],
        'types': json['types'] == null ? undefined : json['types'],
        'warmupTime': json['warmup_time'] == null ? undefined : json['warmup_time'],
        'cooldownTime': json['cooldown_time'] == null ? undefined : json['cooldown_time'],
        'ftp': json['ftp'] == null ? undefined : json['ftp'],
        'indoorFtp': json['indoor_ftp'] == null ? undefined : json['indoor_ftp'],
        'wPrime': json['w_prime'] == null ? undefined : json['w_prime'],
        'powerZones': json['power_zones'] == null ? undefined : json['power_zones'],
        'sweetSpotMin': json['sweet_spot_min'] == null ? undefined : json['sweet_spot_min'],
        'sweetSpotMax': json['sweet_spot_max'] == null ? undefined : json['sweet_spot_max'],
        'powerSpikeThreshold': json['power_spike_threshold'] == null ? undefined : json['power_spike_threshold'],
        'powerZoneNames': json['power_zone_names'] == null ? undefined : json['power_zone_names'],
        'ftpEstMinSecs': json['ftp_est_min_secs'] == null ? undefined : json['ftp_est_min_secs'],
        'useLapsForPowerIntervals': json['use_laps_for_power_intervals'] == null ? undefined : json['use_laps_for_power_intervals'],
        'keepAllLapsForPowerIntervals': json['keep_all_laps_for_power_intervals'] == null ? undefined : json['keep_all_laps_for_power_intervals'],
        'afterKj0': json['after_kj0'] == null ? undefined : json['after_kj0'],
        'afterKj1': json['after_kj1'] == null ? undefined : json['after_kj1'],
        'powerField': json['power_field'] == null ? undefined : json['power_field'],
        'lthr': json['lthr'] == null ? undefined : json['lthr'],
        'maxHr': json['max_hr'] == null ? undefined : json['max_hr'],
        'hrZones': json['hr_zones'] == null ? undefined : json['hr_zones'],
        'hrZoneNames': json['hr_zone_names'] == null ? undefined : json['hr_zone_names'],
        'hrLoadType': json['hr_load_type'] == null ? undefined : json['hr_load_type'],
        'hrrcMinPercent': json['hrrc_min_percent'] == null ? undefined : json['hrrc_min_percent'],
        'thresholdPace': json['threshold_pace'] == null ? undefined : json['threshold_pace'],
        'paceUnits': json['pace_units'] == null ? undefined : json['pace_units'],
        'paceZones': json['pace_zones'] == null ? undefined : json['pace_zones'],
        'paceZoneNames': json['pace_zone_names'] == null ? undefined : json['pace_zone_names'],
        'paceLoadType': json['pace_load_type'] == null ? undefined : json['pace_load_type'],
        'gapModel': json['gap_model'] == null ? undefined : json['gap_model'],
        'elevationCorrection': json['elevation_correction'] == null ? undefined : json['elevation_correction'],
        'useGapZoneTimes': json['use_gap_zone_times'] == null ? undefined : json['use_gap_zone_times'],
        'bestEffortDistances': json['best_effort_distances'] == null ? undefined : json['best_effort_distances'],
        'paceCurveStart': json['pace_curve_start'] == null ? undefined : json['pace_curve_start'],
        'loadOrder': json['load_order'] == null ? undefined : json['load_order'],
        'tizOrder': json['tiz_order'] == null ? undefined : json['tiz_order'],
        'workoutOrder': json['workout_order'] == null ? undefined : json['workout_order'],
        'intervalDisplay': json['interval_display'] == null ? undefined : json['interval_display'],
        'defaultGearId': json['default_gear_id'] == null ? undefined : json['default_gear_id'],
        'defaultIndoorGearId': json['default_indoor_gear_id'] == null ? undefined : json['default_indoor_gear_id'],
        'extractWorkouts': json['extract_workouts'] == null ? undefined : json['extract_workouts'],
        'showPauses': json['show_pauses'] == null ? undefined : json['show_pauses'],
        'ignoreVelocity': json['ignore_velocity'] == null ? undefined : json['ignore_velocity'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'mmpModel': json['mmp_model'] == null ? undefined : PowerModelFromJSON(json['mmp_model']),
        'display': json['display'] == null ? undefined : DisplayFromJSON(json['display']),
        'activityFieldIds': json['activity_field_ids'] == null ? undefined : json['activity_field_ids'],
        'activityCharts': json['activity_charts'] == null ? undefined : ActivityChartsFromJSON(json['activity_charts']),
        'other': json['other'] == null ? undefined : json['other'],
        'iseFTPSupported': json['iseFTPSupported'] == null ? undefined : json['iseFTPSupported'],
        'useDistanceForIntervals': json['use_distance_for_intervals'] == null ? undefined : json['use_distance_for_intervals'],
    };
}

export function SportSettingsToJSON(value?: SportSettings | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'athlete_id': value['athleteId'],
        'types': value['types'],
        'warmup_time': value['warmupTime'],
        'cooldown_time': value['cooldownTime'],
        'ftp': value['ftp'],
        'indoor_ftp': value['indoorFtp'],
        'w_prime': value['wPrime'],
        'power_zones': value['powerZones'],
        'sweet_spot_min': value['sweetSpotMin'],
        'sweet_spot_max': value['sweetSpotMax'],
        'power_spike_threshold': value['powerSpikeThreshold'],
        'power_zone_names': value['powerZoneNames'],
        'ftp_est_min_secs': value['ftpEstMinSecs'],
        'use_laps_for_power_intervals': value['useLapsForPowerIntervals'],
        'keep_all_laps_for_power_intervals': value['keepAllLapsForPowerIntervals'],
        'after_kj0': value['afterKj0'],
        'after_kj1': value['afterKj1'],
        'power_field': value['powerField'],
        'lthr': value['lthr'],
        'max_hr': value['maxHr'],
        'hr_zones': value['hrZones'],
        'hr_zone_names': value['hrZoneNames'],
        'hr_load_type': value['hrLoadType'],
        'hrrc_min_percent': value['hrrcMinPercent'],
        'threshold_pace': value['thresholdPace'],
        'pace_units': value['paceUnits'],
        'pace_zones': value['paceZones'],
        'pace_zone_names': value['paceZoneNames'],
        'pace_load_type': value['paceLoadType'],
        'gap_model': value['gapModel'],
        'elevation_correction': value['elevationCorrection'],
        'use_gap_zone_times': value['useGapZoneTimes'],
        'best_effort_distances': value['bestEffortDistances'],
        'pace_curve_start': value['paceCurveStart'],
        'load_order': value['loadOrder'],
        'tiz_order': value['tizOrder'],
        'workout_order': value['workoutOrder'],
        'interval_display': value['intervalDisplay'],
        'default_gear_id': value['defaultGearId'],
        'default_indoor_gear_id': value['defaultIndoorGearId'],
        'extract_workouts': value['extractWorkouts'],
        'show_pauses': value['showPauses'],
        'ignore_velocity': value['ignoreVelocity'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString()),
        'mmp_model': PowerModelToJSON(value['mmpModel']),
        'display': DisplayToJSON(value['display']),
        'activity_field_ids': value['activityFieldIds'],
        'activity_charts': ActivityChartsToJSON(value['activityCharts']),
        'other': value['other'],
        'iseFTPSupported': value['iseFTPSupported'],
        'use_distance_for_intervals': value['useDistanceForIntervals'],
    };
}

