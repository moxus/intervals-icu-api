/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActivityFilter } from './ActivityFilter';
import {
    ActivityFilterFromJSON,
    ActivityFilterFromJSONTyped,
    ActivityFilterToJSON,
} from './ActivityFilter';
import type { GearReminder } from './GearReminder';
import {
    GearReminderFromJSON,
    GearReminderFromJSONTyped,
    GearReminderToJSON,
} from './GearReminder';

/**
 * 
 * @export
 * @interface Gear
 */
export interface Gear {
    /**
     * 
     * @type {string}
     * @memberof Gear
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Gear
     */
    athleteId?: string;
    /**
     * 
     * @type {string}
     * @memberof Gear
     */
    type?: GearTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Gear
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Gear
     */
    purchased?: string;
    /**
     * 
     * @type {string}
     * @memberof Gear
     */
    notes?: string;
    /**
     * 
     * @type {number}
     * @memberof Gear
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof Gear
     */
    time?: number;
    /**
     * 
     * @type {number}
     * @memberof Gear
     */
    activities?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Gear
     */
    useElapsedTime?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Gear
     */
    retired?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Gear
     */
    componentIds?: Array<string>;
    /**
     * 
     * @type {Array<GearReminder>}
     * @memberof Gear
     */
    reminders?: Array<GearReminder>;
    /**
     * 
     * @type {Array<ActivityFilter>}
     * @memberof Gear
     */
    activityFilters?: Array<ActivityFilter>;
    /**
     * 
     * @type {boolean}
     * @memberof Gear
     */
    component?: boolean;
}


/**
 * @export
 */
export const GearTypeEnum = {
    Bike: 'Bike',
    Shoes: 'Shoes',
    Wetsuit: 'Wetsuit',
    RowingMachine: 'RowingMachine',
    Skis: 'Skis',
    Snowboard: 'Snowboard',
    Boat: 'Boat',
    Board: 'Board',
    Equipment: 'Equipment',
    Accessories: 'Accessories',
    Apparel: 'Apparel',
    Computer: 'Computer',
    Light: 'Light',
    Battery: 'Battery',
    Brake: 'Brake',
    BrakePads: 'BrakePads',
    Rotor: 'Rotor',
    Drivetrain: 'Drivetrain',
    BottomBracket: 'BottomBracket',
    Cassette: 'Cassette',
    Chain: 'Chain',
    Chainrings: 'Chainrings',
    Crankset: 'Crankset',
    Derailleur: 'Derailleur',
    Pedals: 'Pedals',
    Lever: 'Lever',
    Cable: 'Cable',
    Frame: 'Frame',
    Fork: 'Fork',
    Handlebar: 'Handlebar',
    Headset: 'Headset',
    Saddle: 'Saddle',
    Seatpost: 'Seatpost',
    Shock: 'Shock',
    Stem: 'Stem',
    Axel: 'Axel',
    Hub: 'Hub',
    Trainer: 'Trainer',
    Tube: 'Tube',
    Tyre: 'Tyre',
    Wheel: 'Wheel',
    Wheelset: 'Wheelset',
    PowerMeter: 'PowerMeter',
    Cleats: 'Cleats',
    CyclingShoes: 'CyclingShoes',
    Paddle: 'Paddle'
} as const;
export type GearTypeEnum = typeof GearTypeEnum[keyof typeof GearTypeEnum];


/**
 * Check if a given object implements the Gear interface.
 */
export function instanceOfGear(value: object): value is Gear {
    return true;
}

export function GearFromJSON(json: any): Gear {
    return GearFromJSONTyped(json, false);
}

export function GearFromJSONTyped(json: any, ignoreDiscriminator: boolean): Gear {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'athleteId': json['athlete_id'] == null ? undefined : json['athlete_id'],
        'type': json['type'] == null ? undefined : json['type'],
        'name': json['name'] == null ? undefined : json['name'],
        'purchased': json['purchased'] == null ? undefined : json['purchased'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'distance': json['distance'] == null ? undefined : json['distance'],
        'time': json['time'] == null ? undefined : json['time'],
        'activities': json['activities'] == null ? undefined : json['activities'],
        'useElapsedTime': json['use_elapsed_time'] == null ? undefined : json['use_elapsed_time'],
        'retired': json['retired'] == null ? undefined : json['retired'],
        'componentIds': json['component_ids'] == null ? undefined : json['component_ids'],
        'reminders': json['reminders'] == null ? undefined : ((json['reminders'] as Array<any>).map(GearReminderFromJSON)),
        'activityFilters': json['activity_filters'] == null ? undefined : ((json['activity_filters'] as Array<any>).map(ActivityFilterFromJSON)),
        'component': json['component'] == null ? undefined : json['component'],
    };
}

export function GearToJSON(value?: Gear | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'athlete_id': value['athleteId'],
        'type': value['type'],
        'name': value['name'],
        'purchased': value['purchased'],
        'notes': value['notes'],
        'distance': value['distance'],
        'time': value['time'],
        'activities': value['activities'],
        'use_elapsed_time': value['useElapsedTime'],
        'retired': value['retired'],
        'component_ids': value['componentIds'],
        'reminders': value['reminders'] == null ? undefined : ((value['reminders'] as Array<any>).map(GearReminderToJSON)),
        'activity_filters': value['activityFilters'] == null ? undefined : ((value['activityFilters'] as Array<any>).map(ActivityFilterToJSON)),
        'component': value['component'],
    };
}

