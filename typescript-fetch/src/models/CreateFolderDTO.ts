/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Workout } from './Workout';
import {
    WorkoutFromJSON,
    WorkoutFromJSONTyped,
    WorkoutToJSON,
} from './Workout';
import type { AthleteSearchResult } from './AthleteSearchResult';
import {
    AthleteSearchResultFromJSON,
    AthleteSearchResultFromJSONTyped,
    AthleteSearchResultToJSON,
} from './AthleteSearchResult';

/**
 * 
 * @export
 * @interface CreateFolderDTO
 */
export interface CreateFolderDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDTO
     */
    athleteId?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDTO
     */
    type?: CreateFolderDTOTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDTO
     */
    description?: string;
    /**
     * 
     * @type {Array<Workout>}
     * @memberof CreateFolderDTO
     */
    children?: Array<Workout>;
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDTO
     */
    visibility?: CreateFolderDTOVisibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDTO
     */
    startDateLocal?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    rolloutWeeks?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    autoRolloutDay?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateFolderDTO
     */
    readOnlyWorkouts?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    startingCtl?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    startingAtl?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateFolderDTO
     */
    activityTypes?: Array<CreateFolderDTOActivityTypesEnum>;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    numWorkouts?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    durationWeeks?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    hoursPerWeekMin?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    hoursPerWeekMax?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateFolderDTO
     */
    workoutTargets?: Array<CreateFolderDTOWorkoutTargetsEnum>;
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDTO
     */
    blurb?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateFolderDTO
     */
    canEdit?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    sharedWithCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateFolderDTO
     */
    shareToken?: string;
    /**
     * 
     * @type {AthleteSearchResult}
     * @memberof CreateFolderDTO
     */
    owner?: AthleteSearchResult;
    /**
     * 
     * @type {number}
     * @memberof CreateFolderDTO
     */
    copyFolderId?: number;
}


/**
 * @export
 */
export const CreateFolderDTOTypeEnum = {
    Folder: 'FOLDER',
    Plan: 'PLAN'
} as const;
export type CreateFolderDTOTypeEnum = typeof CreateFolderDTOTypeEnum[keyof typeof CreateFolderDTOTypeEnum];

/**
 * @export
 */
export const CreateFolderDTOVisibilityEnum = {
    Private: 'PRIVATE',
    Public: 'PUBLIC'
} as const;
export type CreateFolderDTOVisibilityEnum = typeof CreateFolderDTOVisibilityEnum[keyof typeof CreateFolderDTOVisibilityEnum];

/**
 * @export
 */
export const CreateFolderDTOActivityTypesEnum = {
    Ride: 'Ride',
    Run: 'Run',
    Swim: 'Swim',
    WeightTraining: 'WeightTraining',
    Hike: 'Hike',
    Walk: 'Walk',
    AlpineSki: 'AlpineSki',
    BackcountrySki: 'BackcountrySki',
    Badminton: 'Badminton',
    Canoeing: 'Canoeing',
    Crossfit: 'Crossfit',
    EBikeRide: 'EBikeRide',
    EMountainBikeRide: 'EMountainBikeRide',
    Elliptical: 'Elliptical',
    Golf: 'Golf',
    GravelRide: 'GravelRide',
    Handcycle: 'Handcycle',
    HighIntensityIntervalTraining: 'HighIntensityIntervalTraining',
    Hockey: 'Hockey',
    IceSkate: 'IceSkate',
    InlineSkate: 'InlineSkate',
    Kayaking: 'Kayaking',
    Kitesurf: 'Kitesurf',
    MountainBikeRide: 'MountainBikeRide',
    NordicSki: 'NordicSki',
    OpenWaterSwim: 'OpenWaterSwim',
    Padel: 'Padel',
    Pilates: 'Pilates',
    Pickleball: 'Pickleball',
    Racquetball: 'Racquetball',
    Rugby: 'Rugby',
    RockClimbing: 'RockClimbing',
    RollerSki: 'RollerSki',
    Rowing: 'Rowing',
    Sail: 'Sail',
    Skateboard: 'Skateboard',
    Snowboard: 'Snowboard',
    Snowshoe: 'Snowshoe',
    Soccer: 'Soccer',
    Squash: 'Squash',
    StairStepper: 'StairStepper',
    StandUpPaddling: 'StandUpPaddling',
    Surfing: 'Surfing',
    TableTennis: 'TableTennis',
    Tennis: 'Tennis',
    TrailRun: 'TrailRun',
    Transition: 'Transition',
    Velomobile: 'Velomobile',
    VirtualRide: 'VirtualRide',
    VirtualRow: 'VirtualRow',
    VirtualRun: 'VirtualRun',
    WaterSport: 'WaterSport',
    Wheelchair: 'Wheelchair',
    Windsurf: 'Windsurf',
    Workout: 'Workout',
    Yoga: 'Yoga',
    Other: 'Other'
} as const;
export type CreateFolderDTOActivityTypesEnum = typeof CreateFolderDTOActivityTypesEnum[keyof typeof CreateFolderDTOActivityTypesEnum];

/**
 * @export
 */
export const CreateFolderDTOWorkoutTargetsEnum = {
    Auto: 'AUTO',
    Power: 'POWER',
    Hr: 'HR',
    Pace: 'PACE'
} as const;
export type CreateFolderDTOWorkoutTargetsEnum = typeof CreateFolderDTOWorkoutTargetsEnum[keyof typeof CreateFolderDTOWorkoutTargetsEnum];


/**
 * Check if a given object implements the CreateFolderDTO interface.
 */
export function instanceOfCreateFolderDTO(value: object): value is CreateFolderDTO {
    return true;
}

export function CreateFolderDTOFromJSON(json: any): CreateFolderDTO {
    return CreateFolderDTOFromJSONTyped(json, false);
}

export function CreateFolderDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateFolderDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'athleteId': json['athlete_id'] == null ? undefined : json['athlete_id'],
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(WorkoutFromJSON)),
        'visibility': json['visibility'] == null ? undefined : json['visibility'],
        'startDateLocal': json['start_date_local'] == null ? undefined : json['start_date_local'],
        'rolloutWeeks': json['rollout_weeks'] == null ? undefined : json['rollout_weeks'],
        'autoRolloutDay': json['auto_rollout_day'] == null ? undefined : json['auto_rollout_day'],
        'readOnlyWorkouts': json['read_only_workouts'] == null ? undefined : json['read_only_workouts'],
        'startingCtl': json['starting_ctl'] == null ? undefined : json['starting_ctl'],
        'startingAtl': json['starting_atl'] == null ? undefined : json['starting_atl'],
        'activityTypes': json['activity_types'] == null ? undefined : json['activity_types'],
        'numWorkouts': json['num_workouts'] == null ? undefined : json['num_workouts'],
        'durationWeeks': json['duration_weeks'] == null ? undefined : json['duration_weeks'],
        'hoursPerWeekMin': json['hours_per_week_min'] == null ? undefined : json['hours_per_week_min'],
        'hoursPerWeekMax': json['hours_per_week_max'] == null ? undefined : json['hours_per_week_max'],
        'workoutTargets': json['workout_targets'] == null ? undefined : json['workout_targets'],
        'blurb': json['blurb'] == null ? undefined : json['blurb'],
        'canEdit': json['canEdit'] == null ? undefined : json['canEdit'],
        'sharedWithCount': json['sharedWithCount'] == null ? undefined : json['sharedWithCount'],
        'shareToken': json['shareToken'] == null ? undefined : json['shareToken'],
        'owner': json['owner'] == null ? undefined : AthleteSearchResultFromJSON(json['owner']),
        'copyFolderId': json['copy_folder_id'] == null ? undefined : json['copy_folder_id'],
    };
}

export function CreateFolderDTOToJSON(value?: CreateFolderDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'athlete_id': value['athleteId'],
        'id': value['id'],
        'type': value['type'],
        'name': value['name'],
        'description': value['description'],
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(WorkoutToJSON)),
        'visibility': value['visibility'],
        'start_date_local': value['startDateLocal'],
        'rollout_weeks': value['rolloutWeeks'],
        'auto_rollout_day': value['autoRolloutDay'],
        'read_only_workouts': value['readOnlyWorkouts'],
        'starting_ctl': value['startingCtl'],
        'starting_atl': value['startingAtl'],
        'activity_types': value['activityTypes'],
        'num_workouts': value['numWorkouts'],
        'duration_weeks': value['durationWeeks'],
        'hours_per_week_min': value['hoursPerWeekMin'],
        'hours_per_week_max': value['hoursPerWeekMax'],
        'workout_targets': value['workoutTargets'],
        'blurb': value['blurb'],
        'canEdit': value['canEdit'],
        'sharedWithCount': value['sharedWithCount'],
        'shareToken': value['shareToken'],
        'owner': AthleteSearchResultToJSON(value['owner']),
        'copy_folder_id': value['copyFolderId'],
    };
}

