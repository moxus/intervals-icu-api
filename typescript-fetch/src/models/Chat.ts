/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatMember } from './ChatMember';
import {
    ChatMemberFromJSON,
    ChatMemberFromJSONTyped,
    ChatMemberToJSON,
} from './ChatMember';
import type { Folder } from './Folder';
import {
    FolderFromJSON,
    FolderFromJSONTyped,
    FolderToJSON,
} from './Folder';

/**
 * 
 * @export
 * @interface Chat
 */
export interface Chat {
    /**
     * 
     * @type {number}
     * @memberof Chat
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    type?: ChatTypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof Chat
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    picture?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    slug?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Chat
     */
    pub?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    joinPolicy?: ChatJoinPolicyEnum;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    sidebarLogo?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    sidebarColor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Chat
     */
    sidebarDark?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    sidebarTopColor?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Chat
     */
    hideMembers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Chat
     */
    primaryGroup?: boolean;
    /**
     * 
     * @type {Array<ChatMember>}
     * @memberof Chat
     */
    members?: Array<ChatMember>;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    athleteId?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    activityId?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    otherAthleteId?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    otherAthleteSex?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    followsYou?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    youFollow?: string;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    role?: ChatRoleEnum;
    /**
     * 
     * @type {number}
     * @memberof Chat
     */
    newMessageCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof Chat
     */
    kicked?: Date;
    /**
     * 
     * @type {string}
     * @memberof Chat
     */
    kickedById?: string;
    /**
     * 
     * @type {number}
     * @memberof Chat
     */
    lastSeenMessageId?: number;
    /**
     * 
     * @type {Date}
     * @memberof Chat
     */
    muteUntil?: Date;
    /**
     * 
     * @type {Array<Folder>}
     * @memberof Chat
     */
    sharedFolders?: Array<Folder>;
}


/**
 * @export
 */
export const ChatTypeEnum = {
    Private: 'PRIVATE',
    Group: 'GROUP',
    Activity: 'ACTIVITY'
} as const;
export type ChatTypeEnum = typeof ChatTypeEnum[keyof typeof ChatTypeEnum];

/**
 * @export
 */
export const ChatJoinPolicyEnum = {
    Open: 'OPEN',
    Ask: 'ASK',
    InviteOnly: 'INVITE_ONLY'
} as const;
export type ChatJoinPolicyEnum = typeof ChatJoinPolicyEnum[keyof typeof ChatJoinPolicyEnum];

/**
 * @export
 */
export const ChatRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN'
} as const;
export type ChatRoleEnum = typeof ChatRoleEnum[keyof typeof ChatRoleEnum];


/**
 * Check if a given object implements the Chat interface.
 */
export function instanceOfChat(value: object): value is Chat {
    return true;
}

export function ChatFromJSON(json: any): Chat {
    return ChatFromJSONTyped(json, false);
}

export function ChatFromJSONTyped(json: any, ignoreDiscriminator: boolean): Chat {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'name': json['name'] == null ? undefined : json['name'],
        'picture': json['picture'] == null ? undefined : json['picture'],
        'description': json['description'] == null ? undefined : json['description'],
        'url': json['url'] == null ? undefined : json['url'],
        'slug': json['slug'] == null ? undefined : json['slug'],
        'pub': json['pub'] == null ? undefined : json['pub'],
        'joinPolicy': json['join_policy'] == null ? undefined : json['join_policy'],
        'sidebarLogo': json['sidebar_logo'] == null ? undefined : json['sidebar_logo'],
        'sidebarColor': json['sidebar_color'] == null ? undefined : json['sidebar_color'],
        'sidebarDark': json['sidebar_dark'] == null ? undefined : json['sidebar_dark'],
        'sidebarTopColor': json['sidebar_top_color'] == null ? undefined : json['sidebar_top_color'],
        'hideMembers': json['hide_members'] == null ? undefined : json['hide_members'],
        'primaryGroup': json['primary_group'] == null ? undefined : json['primary_group'],
        'members': json['members'] == null ? undefined : ((json['members'] as Array<any>).map(ChatMemberFromJSON)),
        'athleteId': json['athlete_id'] == null ? undefined : json['athlete_id'],
        'activityId': json['activity_id'] == null ? undefined : json['activity_id'],
        'otherAthleteId': json['other_athlete_id'] == null ? undefined : json['other_athlete_id'],
        'otherAthleteSex': json['other_athlete_sex'] == null ? undefined : json['other_athlete_sex'],
        'followsYou': json['follows_you'] == null ? undefined : json['follows_you'],
        'youFollow': json['you_follow'] == null ? undefined : json['you_follow'],
        'role': json['role'] == null ? undefined : json['role'],
        'newMessageCount': json['new_message_count'] == null ? undefined : json['new_message_count'],
        'kicked': json['kicked'] == null ? undefined : (new Date(json['kicked'])),
        'kickedById': json['kicked_by_id'] == null ? undefined : json['kicked_by_id'],
        'lastSeenMessageId': json['last_seen_message_id'] == null ? undefined : json['last_seen_message_id'],
        'muteUntil': json['mute_until'] == null ? undefined : (new Date(json['mute_until'])),
        'sharedFolders': json['sharedFolders'] == null ? undefined : ((json['sharedFolders'] as Array<any>).map(FolderFromJSON)),
    };
}

export function ChatToJSON(value?: Chat | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': value['type'],
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString()),
        'name': value['name'],
        'picture': value['picture'],
        'description': value['description'],
        'url': value['url'],
        'slug': value['slug'],
        'pub': value['pub'],
        'join_policy': value['joinPolicy'],
        'sidebar_logo': value['sidebarLogo'],
        'sidebar_color': value['sidebarColor'],
        'sidebar_dark': value['sidebarDark'],
        'sidebar_top_color': value['sidebarTopColor'],
        'hide_members': value['hideMembers'],
        'primary_group': value['primaryGroup'],
        'members': value['members'] == null ? undefined : ((value['members'] as Array<any>).map(ChatMemberToJSON)),
        'athlete_id': value['athleteId'],
        'activity_id': value['activityId'],
        'other_athlete_id': value['otherAthleteId'],
        'other_athlete_sex': value['otherAthleteSex'],
        'follows_you': value['followsYou'],
        'you_follow': value['youFollow'],
        'role': value['role'],
        'new_message_count': value['newMessageCount'],
        'kicked': value['kicked'] == null ? undefined : ((value['kicked']).toISOString()),
        'kicked_by_id': value['kickedById'],
        'last_seen_message_id': value['lastSeenMessageId'],
        'mute_until': value['muteUntil'] == null ? undefined : ((value['muteUntil']).toISOString()),
        'sharedFolders': value['sharedFolders'] == null ? undefined : ((value['sharedFolders'] as Array<any>).map(FolderToJSON)),
    };
}

