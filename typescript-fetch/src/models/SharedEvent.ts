/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AthleteSearchResult } from './AthleteSearchResult';
import {
    AthleteSearchResultFromJSON,
    AthleteSearchResultFromJSONTyped,
    AthleteSearchResultToJSON,
} from './AthleteSearchResult';

/**
 * 
 * @export
 * @interface SharedEvent
 */
export interface SharedEvent {
    /**
     * 
     * @type {number}
     * @memberof SharedEvent
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    externalId?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    athleteId?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    category?: SharedEventCategoryEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof SharedEvent
     */
    types?: Array<SharedEventTypesEnum>;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    startDateLocal?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    visibility?: SharedEventVisibilityEnum;
    /**
     * 
     * @type {number}
     * @memberof SharedEvent
     */
    chatId?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    closingDateLocal?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    region?: string;
    /**
     * 
     * @type {number}
     * @memberof SharedEvent
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof SharedEvent
     */
    lon?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    routeFile?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedEvent
     */
    polyline?: string;
    /**
     * 
     * @type {number}
     * @memberof SharedEvent
     */
    usageCount?: number;
    /**
     * 
     * @type {AthleteSearchResult}
     * @memberof SharedEvent
     */
    owner?: AthleteSearchResult;
}


/**
 * @export
 */
export const SharedEventCategoryEnum = {
    Race: 'RACE',
    Workout: 'WORKOUT'
} as const;
export type SharedEventCategoryEnum = typeof SharedEventCategoryEnum[keyof typeof SharedEventCategoryEnum];

/**
 * @export
 */
export const SharedEventTypesEnum = {
    Ride: 'Ride',
    Run: 'Run',
    Swim: 'Swim',
    WeightTraining: 'WeightTraining',
    Hike: 'Hike',
    Walk: 'Walk',
    AlpineSki: 'AlpineSki',
    BackcountrySki: 'BackcountrySki',
    Badminton: 'Badminton',
    Canoeing: 'Canoeing',
    Crossfit: 'Crossfit',
    EBikeRide: 'EBikeRide',
    EMountainBikeRide: 'EMountainBikeRide',
    Elliptical: 'Elliptical',
    Golf: 'Golf',
    GravelRide: 'GravelRide',
    Handcycle: 'Handcycle',
    HighIntensityIntervalTraining: 'HighIntensityIntervalTraining',
    Hockey: 'Hockey',
    IceSkate: 'IceSkate',
    InlineSkate: 'InlineSkate',
    Kayaking: 'Kayaking',
    Kitesurf: 'Kitesurf',
    MountainBikeRide: 'MountainBikeRide',
    NordicSki: 'NordicSki',
    OpenWaterSwim: 'OpenWaterSwim',
    Padel: 'Padel',
    Pilates: 'Pilates',
    Pickleball: 'Pickleball',
    Racquetball: 'Racquetball',
    Rugby: 'Rugby',
    RockClimbing: 'RockClimbing',
    RollerSki: 'RollerSki',
    Rowing: 'Rowing',
    Sail: 'Sail',
    Skateboard: 'Skateboard',
    Snowboard: 'Snowboard',
    Snowshoe: 'Snowshoe',
    Soccer: 'Soccer',
    Squash: 'Squash',
    StairStepper: 'StairStepper',
    StandUpPaddling: 'StandUpPaddling',
    Surfing: 'Surfing',
    TableTennis: 'TableTennis',
    Tennis: 'Tennis',
    TrailRun: 'TrailRun',
    Transition: 'Transition',
    Velomobile: 'Velomobile',
    VirtualRide: 'VirtualRide',
    VirtualRow: 'VirtualRow',
    VirtualRun: 'VirtualRun',
    WaterSport: 'WaterSport',
    Wheelchair: 'Wheelchair',
    Windsurf: 'Windsurf',
    Workout: 'Workout',
    Yoga: 'Yoga',
    Other: 'Other'
} as const;
export type SharedEventTypesEnum = typeof SharedEventTypesEnum[keyof typeof SharedEventTypesEnum];

/**
 * @export
 */
export const SharedEventVisibilityEnum = {
    Public: 'PUBLIC',
    Group: 'GROUP'
} as const;
export type SharedEventVisibilityEnum = typeof SharedEventVisibilityEnum[keyof typeof SharedEventVisibilityEnum];


/**
 * Check if a given object implements the SharedEvent interface.
 */
export function instanceOfSharedEvent(value: object): value is SharedEvent {
    return true;
}

export function SharedEventFromJSON(json: any): SharedEvent {
    return SharedEventFromJSONTyped(json, false);
}

export function SharedEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): SharedEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'athleteId': json['athlete_id'] == null ? undefined : json['athlete_id'],
        'category': json['category'] == null ? undefined : json['category'],
        'types': json['types'] == null ? undefined : json['types'],
        'name': json['name'] == null ? undefined : json['name'],
        'startDateLocal': json['start_date_local'] == null ? undefined : json['start_date_local'],
        'visibility': json['visibility'] == null ? undefined : json['visibility'],
        'chatId': json['chat_id'] == null ? undefined : json['chat_id'],
        'description': json['description'] == null ? undefined : json['description'],
        'website': json['website'] == null ? undefined : json['website'],
        'closingDateLocal': json['closing_date_local'] == null ? undefined : json['closing_date_local'],
        'location': json['location'] == null ? undefined : json['location'],
        'address': json['address'] == null ? undefined : json['address'],
        'country': json['country'] == null ? undefined : json['country'],
        'region': json['region'] == null ? undefined : json['region'],
        'lat': json['lat'] == null ? undefined : json['lat'],
        'lon': json['lon'] == null ? undefined : json['lon'],
        'routeFile': json['route_file'] == null ? undefined : json['route_file'],
        'polyline': json['polyline'] == null ? undefined : json['polyline'],
        'usageCount': json['usage_count'] == null ? undefined : json['usage_count'],
        'owner': json['owner'] == null ? undefined : AthleteSearchResultFromJSON(json['owner']),
    };
}

export function SharedEventToJSON(value?: SharedEvent | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'external_id': value['externalId'],
        'athlete_id': value['athleteId'],
        'category': value['category'],
        'types': value['types'],
        'name': value['name'],
        'start_date_local': value['startDateLocal'],
        'visibility': value['visibility'],
        'chat_id': value['chatId'],
        'description': value['description'],
        'website': value['website'],
        'closing_date_local': value['closingDateLocal'],
        'location': value['location'],
        'address': value['address'],
        'country': value['country'],
        'region': value['region'],
        'lat': value['lat'],
        'lon': value['lon'],
        'route_file': value['routeFile'],
        'polyline': value['polyline'],
        'usage_count': value['usageCount'],
        'owner': AthleteSearchResultToJSON(value['owner']),
    };
}

