/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Activity } from './Activity';
import {
    ActivityFromJSON,
    ActivityFromJSONTyped,
    ActivityToJSON,
} from './Activity';

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    athleteId?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    type?: MessageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    activityId?: string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    startIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    endIndex?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    answer?: string;
    /**
     * 
     * @type {Activity}
     * @memberof Message
     */
    activity?: Activity;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    attachmentUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    attachmentMimeType?: string;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    deleted?: Date;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    deletedById?: string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    joinGroupId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Message
     */
    seen?: boolean;
}


/**
 * @export
 */
export const MessageTypeEnum = {
    Text: 'TEXT',
    FollowReq: 'FOLLOW_REQ',
    CoachReq: 'COACH_REQ',
    CoachMeReq: 'COACH_ME_REQ',
    Activity: 'ACTIVITY',
    Note: 'NOTE',
    JoinReq: 'JOIN_REQ'
} as const;
export type MessageTypeEnum = typeof MessageTypeEnum[keyof typeof MessageTypeEnum];


/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): value is Message {
    return true;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'athleteId': json['athlete_id'] == null ? undefined : json['athlete_id'],
        'name': json['name'] == null ? undefined : json['name'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'type': json['type'] == null ? undefined : json['type'],
        'content': json['content'] == null ? undefined : json['content'],
        'activityId': json['activity_id'] == null ? undefined : json['activity_id'],
        'startIndex': json['start_index'] == null ? undefined : json['start_index'],
        'endIndex': json['end_index'] == null ? undefined : json['end_index'],
        'answer': json['answer'] == null ? undefined : json['answer'],
        'activity': json['activity'] == null ? undefined : ActivityFromJSON(json['activity']),
        'attachmentUrl': json['attachment_url'] == null ? undefined : json['attachment_url'],
        'attachmentMimeType': json['attachment_mime_type'] == null ? undefined : json['attachment_mime_type'],
        'deleted': json['deleted'] == null ? undefined : (new Date(json['deleted'])),
        'deletedById': json['deleted_by_id'] == null ? undefined : json['deleted_by_id'],
        'joinGroupId': json['join_group_id'] == null ? undefined : json['join_group_id'],
        'seen': json['seen'] == null ? undefined : json['seen'],
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'athlete_id': value['athleteId'],
        'name': value['name'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'type': value['type'],
        'content': value['content'],
        'activity_id': value['activityId'],
        'start_index': value['startIndex'],
        'end_index': value['endIndex'],
        'answer': value['answer'],
        'activity': ActivityToJSON(value['activity']),
        'attachment_url': value['attachmentUrl'],
        'attachment_mime_type': value['attachmentMimeType'],
        'deleted': value['deleted'] == null ? undefined : ((value['deleted']).toISOString()),
        'deleted_by_id': value['deletedById'],
        'join_group_id': value['joinGroupId'],
        'seen': value['seen'],
    };
}

