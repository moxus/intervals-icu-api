/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ActivityFilter
 */
export interface ActivityFilter {
    /**
     * 
     * @type {number}
     * @memberof ActivityFilter
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ActivityFilter
     */
    fieldId?: ActivityFilterFieldIdEnum;
    /**
     * 
     * @type {string}
     * @memberof ActivityFilter
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityFilter
     */
    operator?: string;
    /**
     * 
     * @type {object}
     * @memberof ActivityFilter
     */
    value?: object;
    /**
     * 
     * @type {boolean}
     * @memberof ActivityFilter
     */
    not?: boolean;
}


/**
 * @export
 */
export const ActivityFilterFieldIdEnum = {
    Type: 'type',
    Indoor: 'indoor',
    Name: 'name',
    NotName: 'notName',
    Description: 'description',
    MovingTime: 'moving_time',
    ElapsedTime: 'elapsed_time',
    CoastingTime: 'coasting_time',
    Distance: 'distance',
    Climbing: 'climbing',
    Load: 'load',
    Source: 'source',
    Race: 'race',
    AverageHeartrate: 'average_heartrate',
    MaxHeartrate: 'max_heartrate',
    Hrrc: 'hrrc',
    AveragePower: 'average_power',
    NormPower: 'norm_power',
    Pace: 'pace',
    Gap: 'gap',
    AverageSpeed: 'average_speed',
    MaxSpeed: 'max_speed',
    VariabilityIndex: 'variability_index',
    Intensity: 'intensity',
    AverageCadence: 'average_cadence',
    AverageCadenceZ2: 'average_cadence_z2',
    AverageTemp: 'average_temp',
    Calories: 'calories',
    Work: 'work',
    WorkAboveFtp: 'work_above_ftp',
    MaxWbalDepletion: 'max_wbal_depletion',
    Efficiency: 'efficiency',
    PowerHr: 'power_hr',
    PowerHrZ2: 'power_hr_z2',
    PowerHrZ2Mins: 'power_hr_z2_mins',
    Rpe: 'rpe',
    Feel: 'feel',
    SessionRpe: 'session_rpe',
    KgLifted: 'kg_lifted',
    PowerMeter: 'power_meter',
    PowerMeterSerial: 'power_meter_serial',
    GearName: 'gear_name',
    Trimp: 'trimp',
    Custom: 'custom',
    Tags: 'tags',
    DeviceName: 'device_name',
    Compliance: 'compliance',
    PolarizationIndex: 'polarization_index',
    DayOfWeek: 'day_of_week',
    AverageAltitude: 'average_altitude',
    MinAltitude: 'min_altitude',
    MaxAltitude: 'max_altitude'
} as const;
export type ActivityFilterFieldIdEnum = typeof ActivityFilterFieldIdEnum[keyof typeof ActivityFilterFieldIdEnum];


/**
 * Check if a given object implements the ActivityFilter interface.
 */
export function instanceOfActivityFilter(value: object): value is ActivityFilter {
    return true;
}

export function ActivityFilterFromJSON(json: any): ActivityFilter {
    return ActivityFilterFromJSONTyped(json, false);
}

export function ActivityFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'fieldId': json['field_id'] == null ? undefined : json['field_id'],
        'code': json['code'] == null ? undefined : json['code'],
        'operator': json['operator'] == null ? undefined : json['operator'],
        'value': json['value'] == null ? undefined : json['value'],
        'not': json['not'] == null ? undefined : json['not'],
    };
}

export function ActivityFilterToJSON(value?: ActivityFilter | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'field_id': value['fieldId'],
        'code': value['code'],
        'operator': value['operator'],
        'value': value['value'],
        'not': value['not'],
    };
}

