/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Bucket } from './Bucket';
import {
    BucketFromJSON,
    BucketFromJSONTyped,
    BucketToJSON,
} from './Bucket';
import type { Curve } from './Curve';
import {
    CurveFromJSON,
    CurveFromJSONTyped,
    CurveToJSON,
} from './Curve';

/**
 * 
 * @export
 * @interface PowerVsHRPlot
 */
export interface PowerVsHRPlot {
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    bucketSize?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    warmup?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    cooldown?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    elapsedTime?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    hrLag?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    powerHr?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    powerHrFirst?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    powerHrSecond?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    decoupling?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    powerHrZ2?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    medianCadenceZ2?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    avgCadenceZ2?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    hrZ2BucketCount?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    start?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    mid?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerVsHRPlot
     */
    end?: number;
    /**
     * 
     * @type {Array<Bucket>}
     * @memberof PowerVsHRPlot
     */
    series?: Array<Bucket>;
    /**
     * 
     * @type {Array<Curve>}
     * @memberof PowerVsHRPlot
     */
    curves?: Array<Curve>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PowerVsHRPlot
     */
    ratioCoefficients?: Array<number>;
}

/**
 * Check if a given object implements the PowerVsHRPlot interface.
 */
export function instanceOfPowerVsHRPlot(value: object): value is PowerVsHRPlot {
    return true;
}

export function PowerVsHRPlotFromJSON(json: any): PowerVsHRPlot {
    return PowerVsHRPlotFromJSONTyped(json, false);
}

export function PowerVsHRPlotFromJSONTyped(json: any, ignoreDiscriminator: boolean): PowerVsHRPlot {
    if (json == null) {
        return json;
    }
    return {
        
        'bucketSize': json['bucketSize'] == null ? undefined : json['bucketSize'],
        'warmup': json['warmup'] == null ? undefined : json['warmup'],
        'cooldown': json['cooldown'] == null ? undefined : json['cooldown'],
        'elapsedTime': json['elapsedTime'] == null ? undefined : json['elapsedTime'],
        'hrLag': json['hrLag'] == null ? undefined : json['hrLag'],
        'powerHr': json['powerHr'] == null ? undefined : json['powerHr'],
        'powerHrFirst': json['powerHrFirst'] == null ? undefined : json['powerHrFirst'],
        'powerHrSecond': json['powerHrSecond'] == null ? undefined : json['powerHrSecond'],
        'decoupling': json['decoupling'] == null ? undefined : json['decoupling'],
        'powerHrZ2': json['powerHrZ2'] == null ? undefined : json['powerHrZ2'],
        'medianCadenceZ2': json['medianCadenceZ2'] == null ? undefined : json['medianCadenceZ2'],
        'avgCadenceZ2': json['avgCadenceZ2'] == null ? undefined : json['avgCadenceZ2'],
        'hrZ2BucketCount': json['hrZ2BucketCount'] == null ? undefined : json['hrZ2BucketCount'],
        'start': json['start'] == null ? undefined : json['start'],
        'mid': json['mid'] == null ? undefined : json['mid'],
        'end': json['end'] == null ? undefined : json['end'],
        'series': json['series'] == null ? undefined : ((json['series'] as Array<any>).map(BucketFromJSON)),
        'curves': json['curves'] == null ? undefined : ((json['curves'] as Array<any>).map(CurveFromJSON)),
        'ratioCoefficients': json['ratioCoefficients'] == null ? undefined : json['ratioCoefficients'],
    };
}

export function PowerVsHRPlotToJSON(value?: PowerVsHRPlot | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'bucketSize': value['bucketSize'],
        'warmup': value['warmup'],
        'cooldown': value['cooldown'],
        'elapsedTime': value['elapsedTime'],
        'hrLag': value['hrLag'],
        'powerHr': value['powerHr'],
        'powerHrFirst': value['powerHrFirst'],
        'powerHrSecond': value['powerHrSecond'],
        'decoupling': value['decoupling'],
        'powerHrZ2': value['powerHrZ2'],
        'medianCadenceZ2': value['medianCadenceZ2'],
        'avgCadenceZ2': value['avgCadenceZ2'],
        'hrZ2BucketCount': value['hrZ2BucketCount'],
        'start': value['start'],
        'mid': value['mid'],
        'end': value['end'],
        'series': value['series'] == null ? undefined : ((value['series'] as Array<any>).map(BucketToJSON)),
        'curves': value['curves'] == null ? undefined : ((value['curves'] as Array<any>).map(CurveToJSON)),
        'ratioCoefficients': value['ratioCoefficients'],
    };
}

