/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PowerHRCurve
 */
export interface PowerHRCurve {
    /**
     * 
     * @type {string}
     * @memberof PowerHRCurve
     */
    athleteId?: string;
    /**
     * 
     * @type {string}
     * @memberof PowerHRCurve
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof PowerHRCurve
     */
    end?: string;
    /**
     * 
     * @type {number}
     * @memberof PowerHRCurve
     */
    minWatts?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerHRCurve
     */
    maxWatts?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerHRCurve
     */
    bucketSize?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PowerHRCurve
     */
    bpm?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PowerHRCurve
     */
    cadence?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PowerHRCurve
     */
    minutes?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PowerHRCurve
     */
    lthr?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerHRCurve
     */
    maxHr?: number;
    /**
     * 
     * @type {number}
     * @memberof PowerHRCurve
     */
    ftp?: number;
}

/**
 * Check if a given object implements the PowerHRCurve interface.
 */
export function instanceOfPowerHRCurve(value: object): value is PowerHRCurve {
    return true;
}

export function PowerHRCurveFromJSON(json: any): PowerHRCurve {
    return PowerHRCurveFromJSONTyped(json, false);
}

export function PowerHRCurveFromJSONTyped(json: any, ignoreDiscriminator: boolean): PowerHRCurve {
    if (json == null) {
        return json;
    }
    return {
        
        'athleteId': json['athleteId'] == null ? undefined : json['athleteId'],
        'start': json['start'] == null ? undefined : json['start'],
        'end': json['end'] == null ? undefined : json['end'],
        'minWatts': json['minWatts'] == null ? undefined : json['minWatts'],
        'maxWatts': json['maxWatts'] == null ? undefined : json['maxWatts'],
        'bucketSize': json['bucketSize'] == null ? undefined : json['bucketSize'],
        'bpm': json['bpm'] == null ? undefined : json['bpm'],
        'cadence': json['cadence'] == null ? undefined : json['cadence'],
        'minutes': json['minutes'] == null ? undefined : json['minutes'],
        'lthr': json['lthr'] == null ? undefined : json['lthr'],
        'maxHr': json['max_hr'] == null ? undefined : json['max_hr'],
        'ftp': json['ftp'] == null ? undefined : json['ftp'],
    };
}

export function PowerHRCurveToJSON(value?: PowerHRCurve | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'athleteId': value['athleteId'],
        'start': value['start'],
        'end': value['end'],
        'minWatts': value['minWatts'],
        'maxWatts': value['maxWatts'],
        'bucketSize': value['bucketSize'],
        'bpm': value['bpm'],
        'cadence': value['cadence'],
        'minutes': value['minutes'],
        'lthr': value['lthr'],
        'max_hr': value['maxHr'],
        'ftp': value['ftp'],
    };
}

