/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Gear,
  GearReminder,
  GearStats,
} from '../models/index';
import {
    GearFromJSON,
    GearToJSON,
    GearReminderFromJSON,
    GearReminderToJSON,
    GearStatsFromJSON,
    GearStatsToJSON,
} from '../models/index';

export interface CalcDistanceEtcRequest {
    id: string;
    gearId: string;
}

export interface CreateGearRequest {
    id: string;
    gear: Gear;
}

export interface CreateReminderRequest {
    id: string;
    gearId: string;
    gearReminder: GearReminder;
}

export interface DeleteGearRequest {
    id: string;
    gearId: string;
}

export interface DeleteReminderRequest {
    id: string;
    gearId: string;
    reminderId: number;
}

export interface ListGearRequest {
    id: string;
}

export interface ReplaceGearRequest {
    id: string;
    gearId: string;
    gear: Gear;
}

export interface UpdateGearRequest {
    id: string;
    gearId: string;
    gear: Gear;
}

export interface UpdateReminderRequest {
    id: string;
    gearId: string;
    reminderId: number;
    reset: boolean;
    snoozeDays: number;
    gearReminder: GearReminder;
}

/**
 * 
 */
export class GearApi extends runtime.BaseAPI {

    /**
     * Recalculate gear stats
     */
    async calcDistanceEtcRaw(requestParameters: CalcDistanceEtcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GearStats>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling calcDistanceEtc().'
            );
        }

        if (requestParameters['gearId'] == null) {
            throw new runtime.RequiredError(
                'gearId',
                'Required parameter "gearId" was null or undefined when calling calcDistanceEtc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear/{gearId}/calc`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"gearId"}}`, encodeURIComponent(String(requestParameters['gearId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GearStatsFromJSON(jsonValue));
    }

    /**
     * Recalculate gear stats
     */
    async calcDistanceEtc(requestParameters: CalcDistanceEtcRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GearStats> {
        const response = await this.calcDistanceEtcRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new gear or component
     */
    async createGearRaw(requestParameters: CreateGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gear>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createGear().'
            );
        }

        if (requestParameters['gear'] == null) {
            throw new runtime.RequiredError(
                'gear',
                'Required parameter "gear" was null or undefined when calling createGear().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GearToJSON(requestParameters['gear']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GearFromJSON(jsonValue));
    }

    /**
     * Create a new gear or component
     */
    async createGear(requestParameters: CreateGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gear> {
        const response = await this.createGearRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new reminder
     */
    async createReminderRaw(requestParameters: CreateReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gear>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createReminder().'
            );
        }

        if (requestParameters['gearId'] == null) {
            throw new runtime.RequiredError(
                'gearId',
                'Required parameter "gearId" was null or undefined when calling createReminder().'
            );
        }

        if (requestParameters['gearReminder'] == null) {
            throw new runtime.RequiredError(
                'gearReminder',
                'Required parameter "gearReminder" was null or undefined when calling createReminder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear/{gearId}/reminder`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"gearId"}}`, encodeURIComponent(String(requestParameters['gearId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GearReminderToJSON(requestParameters['gearReminder']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GearFromJSON(jsonValue));
    }

    /**
     * Create a new reminder
     */
    async createReminder(requestParameters: CreateReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gear> {
        const response = await this.createReminderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a gear or component
     */
    async deleteGearRaw(requestParameters: DeleteGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteGear().'
            );
        }

        if (requestParameters['gearId'] == null) {
            throw new runtime.RequiredError(
                'gearId',
                'Required parameter "gearId" was null or undefined when calling deleteGear().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear/{gearId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"gearId"}}`, encodeURIComponent(String(requestParameters['gearId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a gear or component
     */
    async deleteGear(requestParameters: DeleteGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGearRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a reminder
     */
    async deleteReminderRaw(requestParameters: DeleteReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gear>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteReminder().'
            );
        }

        if (requestParameters['gearId'] == null) {
            throw new runtime.RequiredError(
                'gearId',
                'Required parameter "gearId" was null or undefined when calling deleteReminder().'
            );
        }

        if (requestParameters['reminderId'] == null) {
            throw new runtime.RequiredError(
                'reminderId',
                'Required parameter "reminderId" was null or undefined when calling deleteReminder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear/{gearId}/reminder/{reminderId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"gearId"}}`, encodeURIComponent(String(requestParameters['gearId']))).replace(`{${"reminderId"}}`, encodeURIComponent(String(requestParameters['reminderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GearFromJSON(jsonValue));
    }

    /**
     * Delete a reminder
     */
    async deleteReminder(requestParameters: DeleteReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gear> {
        const response = await this.deleteReminderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List athlete gear (use .csv for CSV format)
     */
    async listGearRaw(requestParameters: ListGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Gear>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listGear().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear{ext}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GearFromJSON));
    }

    /**
     * List athlete gear (use .csv for CSV format)
     */
    async listGear(requestParameters: ListGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Gear>> {
        const response = await this.listGearRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retire a component and replace it with a copy with the same reminders etc.
     */
    async replaceGearRaw(requestParameters: ReplaceGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Gear>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling replaceGear().'
            );
        }

        if (requestParameters['gearId'] == null) {
            throw new runtime.RequiredError(
                'gearId',
                'Required parameter "gearId" was null or undefined when calling replaceGear().'
            );
        }

        if (requestParameters['gear'] == null) {
            throw new runtime.RequiredError(
                'gear',
                'Required parameter "gear" was null or undefined when calling replaceGear().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear/{gearId}/replace`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"gearId"}}`, encodeURIComponent(String(requestParameters['gearId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GearToJSON(requestParameters['gear']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GearFromJSON));
    }

    /**
     * Retire a component and replace it with a copy with the same reminders etc.
     */
    async replaceGear(requestParameters: ReplaceGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Gear>> {
        const response = await this.replaceGearRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a gear or component
     */
    async updateGearRaw(requestParameters: UpdateGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gear>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateGear().'
            );
        }

        if (requestParameters['gearId'] == null) {
            throw new runtime.RequiredError(
                'gearId',
                'Required parameter "gearId" was null or undefined when calling updateGear().'
            );
        }

        if (requestParameters['gear'] == null) {
            throw new runtime.RequiredError(
                'gear',
                'Required parameter "gear" was null or undefined when calling updateGear().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear/{gearId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"gearId"}}`, encodeURIComponent(String(requestParameters['gearId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GearToJSON(requestParameters['gear']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GearFromJSON(jsonValue));
    }

    /**
     * Update a gear or component
     */
    async updateGear(requestParameters: UpdateGearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gear> {
        const response = await this.updateGearRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a reminder
     */
    async updateReminderRaw(requestParameters: UpdateReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Gear>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateReminder().'
            );
        }

        if (requestParameters['gearId'] == null) {
            throw new runtime.RequiredError(
                'gearId',
                'Required parameter "gearId" was null or undefined when calling updateReminder().'
            );
        }

        if (requestParameters['reminderId'] == null) {
            throw new runtime.RequiredError(
                'reminderId',
                'Required parameter "reminderId" was null or undefined when calling updateReminder().'
            );
        }

        if (requestParameters['reset'] == null) {
            throw new runtime.RequiredError(
                'reset',
                'Required parameter "reset" was null or undefined when calling updateReminder().'
            );
        }

        if (requestParameters['snoozeDays'] == null) {
            throw new runtime.RequiredError(
                'snoozeDays',
                'Required parameter "snoozeDays" was null or undefined when calling updateReminder().'
            );
        }

        if (requestParameters['gearReminder'] == null) {
            throw new runtime.RequiredError(
                'gearReminder',
                'Required parameter "gearReminder" was null or undefined when calling updateReminder().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['reset'] != null) {
            queryParameters['reset'] = requestParameters['reset'];
        }

        if (requestParameters['snoozeDays'] != null) {
            queryParameters['snoozeDays'] = requestParameters['snoozeDays'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/gear/{gearId}/reminder/{reminderId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"gearId"}}`, encodeURIComponent(String(requestParameters['gearId']))).replace(`{${"reminderId"}}`, encodeURIComponent(String(requestParameters['reminderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GearReminderToJSON(requestParameters['gearReminder']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GearFromJSON(jsonValue));
    }

    /**
     * Update a reminder
     */
    async updateReminder(requestParameters: UpdateReminderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Gear> {
        const response = await this.updateReminderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
