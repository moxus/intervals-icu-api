/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomItem,
  UploadWellnessRequest,
} from '../models/index';
import {
    CustomItemFromJSON,
    CustomItemToJSON,
    UploadWellnessRequestFromJSON,
    UploadWellnessRequestToJSON,
} from '../models/index';

export interface CreateCustomItemRequest {
    id: string;
    customItem: CustomItem;
}

export interface DeleteCustomItemRequest {
    id: string;
    itemId: number;
}

export interface GetCustomItemRequest {
    id: string;
    itemId: number;
}

export interface ListCustomItemsRequest {
    id: string;
}

export interface UpdateCustomItemRequest {
    id: string;
    itemId: number;
    customItem: CustomItem;
}

export interface UpdateCustomItemImageRequest {
    id: string;
    itemId: number;
    uploadWellnessRequest?: UploadWellnessRequest;
}

export interface UpdateCustomItemIndexesRequest {
    id: string;
    customItem: Array<CustomItem>;
}

/**
 * 
 */
export class CustomItemsApi extends runtime.BaseAPI {

    /**
     * Create a custom item
     */
    async createCustomItemRaw(requestParameters: CreateCustomItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createCustomItem().'
            );
        }

        if (requestParameters['customItem'] == null) {
            throw new runtime.RequiredError(
                'customItem',
                'Required parameter "customItem" was null or undefined when calling createCustomItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/custom-item`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomItemToJSON(requestParameters['customItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomItemFromJSON(jsonValue));
    }

    /**
     * Create a custom item
     */
    async createCustomItem(requestParameters: CreateCustomItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomItem> {
        const response = await this.createCustomItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a custom item
     */
    async deleteCustomItemRaw(requestParameters: DeleteCustomItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCustomItem().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling deleteCustomItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/custom-item/{itemId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a custom item
     */
    async deleteCustomItem(requestParameters: DeleteCustomItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCustomItemRaw(requestParameters, initOverrides);
    }

    /**
     * Get a custom item
     */
    async getCustomItemRaw(requestParameters: GetCustomItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCustomItem().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getCustomItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/custom-item/{itemId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomItemFromJSON(jsonValue));
    }

    /**
     * Get a custom item
     */
    async getCustomItem(requestParameters: GetCustomItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomItem> {
        const response = await this.getCustomItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List custom items (charts, custom fields etc.)
     */
    async listCustomItemsRaw(requestParameters: ListCustomItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomItem>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listCustomItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/custom-item`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomItemFromJSON));
    }

    /**
     * List custom items (charts, custom fields etc.)
     */
    async listCustomItems(requestParameters: ListCustomItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomItem>> {
        const response = await this.listCustomItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a custom item
     */
    async updateCustomItemRaw(requestParameters: UpdateCustomItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateCustomItem().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling updateCustomItem().'
            );
        }

        if (requestParameters['customItem'] == null) {
            throw new runtime.RequiredError(
                'customItem',
                'Required parameter "customItem" was null or undefined when calling updateCustomItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/custom-item/{itemId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomItemToJSON(requestParameters['customItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomItemFromJSON(jsonValue));
    }

    /**
     * Update a custom item
     */
    async updateCustomItem(requestParameters: UpdateCustomItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomItem> {
        const response = await this.updateCustomItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a new image for a custom item as multipart/form-data
     */
    async updateCustomItemImageRaw(requestParameters: UpdateCustomItemImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateCustomItemImage().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling updateCustomItemImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/custom-item/{itemId}/image`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadWellnessRequestToJSON(requestParameters['uploadWellnessRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomItemFromJSON(jsonValue));
    }

    /**
     * Upload a new image for a custom item as multipart/form-data
     */
    async updateCustomItemImage(requestParameters: UpdateCustomItemImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomItem> {
        const response = await this.updateCustomItemImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Re-order custom items
     */
    async updateCustomItemIndexesRaw(requestParameters: UpdateCustomItemIndexesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateCustomItemIndexes().'
            );
        }

        if (requestParameters['customItem'] == null) {
            throw new runtime.RequiredError(
                'customItem',
                'Required parameter "customItem" was null or undefined when calling updateCustomItemIndexes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/custom-item-indexes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['customItem']!.map(CustomItemToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Re-order custom items
     */
    async updateCustomItemIndexes(requestParameters: UpdateCustomItemIndexesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCustomItemIndexesRaw(requestParameters, initOverrides);
    }

}
