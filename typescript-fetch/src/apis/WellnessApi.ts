/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UploadWellnessRequest,
  Wellness,
} from '../models/index';
import {
    UploadWellnessRequestFromJSON,
    UploadWellnessRequestToJSON,
    WellnessFromJSON,
    WellnessToJSON,
} from '../models/index';

export interface GetRecordRequest {
    id: string;
    date: string;
}

export interface ListWellnessRecordsRequest {
    id: string;
    oldest?: string;
    newest?: string;
    cols?: Array<string>;
}

export interface UpdateWellnessRequest {
    id: string;
    date: string;
    wellness: Wellness;
}

export interface UpdateWellness1Request {
    id: string;
    wellness: Wellness;
}

export interface UploadWellnessOperationRequest {
    id: string;
    ignoreMissingFields?: boolean;
    uploadWellnessRequest?: UploadWellnessRequest;
}

/**
 * 
 */
export class WellnessApi extends runtime.BaseAPI {

    /**
     * Get wellness record for date (local ISO-8601 day)
     */
    async getRecordRaw(requestParameters: GetRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wellness>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRecord().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/wellness/{date}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WellnessFromJSON(jsonValue));
    }

    /**
     * Get wellness record for date (local ISO-8601 day)
     */
    async getRecord(requestParameters: GetRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wellness> {
        const response = await this.getRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List wellness records for date range (use .csv for CSV format)
     */
    async listWellnessRecordsRaw(requestParameters: ListWellnessRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Wellness>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listWellnessRecords().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['oldest'] != null) {
            queryParameters['oldest'] = requestParameters['oldest'];
        }

        if (requestParameters['newest'] != null) {
            queryParameters['newest'] = requestParameters['newest'];
        }

        if (requestParameters['cols'] != null) {
            queryParameters['cols'] = requestParameters['cols'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/wellness{ext}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WellnessFromJSON));
    }

    /**
     * List wellness records for date range (use .csv for CSV format)
     */
    async listWellnessRecords(requestParameters: ListWellnessRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Wellness>> {
        const response = await this.listWellnessRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Only fields provided are changed
     * Update the wellness record for the date (ISO-8601)
     */
    async updateWellnessRaw(requestParameters: UpdateWellnessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wellness>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWellness().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling updateWellness().'
            );
        }

        if (requestParameters['wellness'] == null) {
            throw new runtime.RequiredError(
                'wellness',
                'Required parameter "wellness" was null or undefined when calling updateWellness().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/wellness/{date}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WellnessToJSON(requestParameters['wellness']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WellnessFromJSON(jsonValue));
    }

    /**
     * Only fields provided are changed
     * Update the wellness record for the date (ISO-8601)
     */
    async updateWellness(requestParameters: UpdateWellnessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wellness> {
        const response = await this.updateWellnessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Only fields provided are changed
     * Update a wellness record, id is the day (ISO-8601)
     */
    async updateWellness1Raw(requestParameters: UpdateWellness1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wellness>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWellness1().'
            );
        }

        if (requestParameters['wellness'] == null) {
            throw new runtime.RequiredError(
                'wellness',
                'Required parameter "wellness" was null or undefined when calling updateWellness1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/wellness`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WellnessToJSON(requestParameters['wellness']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WellnessFromJSON(jsonValue));
    }

    /**
     * Only fields provided are changed
     * Update a wellness record, id is the day (ISO-8601)
     */
    async updateWellness1(requestParameters: UpdateWellness1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wellness> {
        const response = await this.updateWellness1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload wellness records in CSV format as multipart/form-data
     */
    async uploadWellnessRaw(requestParameters: UploadWellnessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling uploadWellness().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignoreMissingFields'] != null) {
            queryParameters['ignoreMissingFields'] = requestParameters['ignoreMissingFields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/wellness`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadWellnessRequestToJSON(requestParameters['uploadWellnessRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Upload wellness records in CSV format as multipart/form-data
     */
    async uploadWellness(requestParameters: UploadWellnessOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.uploadWellnessRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
