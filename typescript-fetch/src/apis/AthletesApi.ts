/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Athlete,
  AthleteProfile,
  AthleteTrainingPlan,
  AthleteTrainingPlanUpdate,
  AthleteUpdateDTO,
  SummaryWithCats,
  WithSportSettings,
} from '../models/index';
import {
    AthleteFromJSON,
    AthleteToJSON,
    AthleteProfileFromJSON,
    AthleteProfileToJSON,
    AthleteTrainingPlanFromJSON,
    AthleteTrainingPlanToJSON,
    AthleteTrainingPlanUpdateFromJSON,
    AthleteTrainingPlanUpdateToJSON,
    AthleteUpdateDTOFromJSON,
    AthleteUpdateDTOToJSON,
    SummaryWithCatsFromJSON,
    SummaryWithCatsToJSON,
    WithSportSettingsFromJSON,
    WithSportSettingsToJSON,
} from '../models/index';

export interface GetAthleteRequest {
    id: string;
}

export interface GetAthleteProfileRequest {
    id: string;
}

export interface GetAthleteSummaryRequest {
    id: string;
    start: string;
    end: string;
    tags?: Array<string>;
}

export interface GetAthleteTrainingPlanRequest {
    id: string;
}

export interface GetSettingsRequest {
    id: string;
    deviceClass: string;
}

export interface UpdateAthleteRequest {
    id: string;
    athleteUpdateDTO: AthleteUpdateDTO;
}

export interface UpdateAthletePlanRequest {
    id: string;
    athleteTrainingPlanUpdate: AthleteTrainingPlanUpdate;
}

export interface UpdateAthletePlansRequest {
    athleteTrainingPlanUpdate: Array<AthleteTrainingPlanUpdate>;
}

/**
 * 
 */
export class AthletesApi extends runtime.BaseAPI {

    /**
     * Get the athlete with sportSettings and custom_items
     */
    async getAthleteRaw(requestParameters: GetAthleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithSportSettings>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAthlete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WithSportSettingsFromJSON(jsonValue));
    }

    /**
     * Get the athlete with sportSettings and custom_items
     */
    async getAthlete(requestParameters: GetAthleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithSportSettings> {
        const response = await this.getAthleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get athlete profile info
     */
    async getAthleteProfileRaw(requestParameters: GetAthleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AthleteProfile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAthleteProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/profile`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AthleteProfileFromJSON(jsonValue));
    }

    /**
     * Get athlete profile info
     */
    async getAthleteProfile(requestParameters: GetAthleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AthleteProfile> {
        const response = await this.getAthleteProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAthleteSummaryRaw(requestParameters: GetAthleteSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SummaryWithCats>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAthleteSummary().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getAthleteSummary().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getAthleteSummary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/athlete-summary{ext}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SummaryWithCatsFromJSON));
    }

    /**
     */
    async getAthleteSummary(requestParameters: GetAthleteSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SummaryWithCats>> {
        const response = await this.getAthleteSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the athlete\'s training plan
     */
    async getAthleteTrainingPlanRaw(requestParameters: GetAthleteTrainingPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AthleteTrainingPlan>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAthleteTrainingPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/training-plan`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AthleteTrainingPlanFromJSON(jsonValue));
    }

    /**
     * Get the athlete\'s training plan
     */
    async getAthleteTrainingPlan(requestParameters: GetAthleteTrainingPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AthleteTrainingPlan> {
        const response = await this.getAthleteTrainingPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the athlete\'s settings for phone, tablet or desktop
     */
    async getSettingsRaw(requestParameters: GetSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSettings().'
            );
        }

        if (requestParameters['deviceClass'] == null) {
            throw new runtime.RequiredError(
                'deviceClass',
                'Required parameter "deviceClass" was null or undefined when calling getSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/settings/{deviceClass}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"deviceClass"}}`, encodeURIComponent(String(requestParameters['deviceClass']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the athlete\'s settings for phone, tablet or desktop
     */
    async getSettings(requestParameters: GetSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an athlete
     */
    async updateAthleteRaw(requestParameters: UpdateAthleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Athlete>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAthlete().'
            );
        }

        if (requestParameters['athleteUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'athleteUpdateDTO',
                'Required parameter "athleteUpdateDTO" was null or undefined when calling updateAthlete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AthleteUpdateDTOToJSON(requestParameters['athleteUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AthleteFromJSON(jsonValue));
    }

    /**
     * Update an athlete
     */
    async updateAthlete(requestParameters: UpdateAthleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Athlete> {
        const response = await this.updateAthleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the athlete\'s training plan
     */
    async updateAthletePlanRaw(requestParameters: UpdateAthletePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AthleteTrainingPlan>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAthletePlan().'
            );
        }

        if (requestParameters['athleteTrainingPlanUpdate'] == null) {
            throw new runtime.RequiredError(
                'athleteTrainingPlanUpdate',
                'Required parameter "athleteTrainingPlanUpdate" was null or undefined when calling updateAthletePlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{id}/training-plan`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AthleteTrainingPlanUpdateToJSON(requestParameters['athleteTrainingPlanUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AthleteTrainingPlanFromJSON(jsonValue));
    }

    /**
     * Change the athlete\'s training plan
     */
    async updateAthletePlan(requestParameters: UpdateAthletePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AthleteTrainingPlan> {
        const response = await this.updateAthletePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change training plans for a list of athletes
     */
    async updateAthletePlansRaw(requestParameters: UpdateAthletePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['athleteTrainingPlanUpdate'] == null) {
            throw new runtime.RequiredError(
                'athleteTrainingPlanUpdate',
                'Required parameter "athleteTrainingPlanUpdate" was null or undefined when calling updateAthletePlans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete-plans`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['athleteTrainingPlanUpdate']!.map(AthleteTrainingPlanUpdateToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Change training plans for a list of athletes
     */
    async updateAthletePlans(requestParameters: UpdateAthletePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateAthletePlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
