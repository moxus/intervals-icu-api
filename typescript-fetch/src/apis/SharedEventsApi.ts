/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SharedEvent,
} from '../models/index';
import {
    SharedEventFromJSON,
    SharedEventToJSON,
} from '../models/index';

export interface CreateSharedEventRequest {
    sharedEvent: SharedEvent;
    linkToEventId?: number;
}

export interface DeleteSharedEventRequest {
    id: number;
}

export interface GetSharedEventRequest {
    id: number;
}

export interface UpdateSharedEventRequest {
    id: number;
    sharedEvent: SharedEvent;
}

/**
 * 
 */
export class SharedEventsApi extends runtime.BaseAPI {

    /**
     * Create a shared event (e.g. race)
     */
    async createSharedEventRaw(requestParameters: CreateSharedEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedEvent>> {
        if (requestParameters['sharedEvent'] == null) {
            throw new runtime.RequiredError(
                'sharedEvent',
                'Required parameter "sharedEvent" was null or undefined when calling createSharedEvent().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['linkToEventId'] != null) {
            queryParameters['linkToEventId'] = requestParameters['linkToEventId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shared-event`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SharedEventToJSON(requestParameters['sharedEvent']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedEventFromJSON(jsonValue));
    }

    /**
     * Create a shared event (e.g. race)
     */
    async createSharedEvent(requestParameters: CreateSharedEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedEvent> {
        const response = await this.createSharedEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a shared event (e.g. race)
     */
    async deleteSharedEventRaw(requestParameters: DeleteSharedEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSharedEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shared-event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a shared event (e.g. race)
     */
    async deleteSharedEvent(requestParameters: DeleteSharedEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSharedEventRaw(requestParameters, initOverrides);
    }

    /**
     * Get a shared event (e.g. race)
     */
    async getSharedEventRaw(requestParameters: GetSharedEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedEvent>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSharedEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shared-event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedEventFromJSON(jsonValue));
    }

    /**
     * Get a shared event (e.g. race)
     */
    async getSharedEvent(requestParameters: GetSharedEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedEvent> {
        const response = await this.getSharedEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a shared event (e.g. race)
     */
    async updateSharedEventRaw(requestParameters: UpdateSharedEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharedEvent>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSharedEvent().'
            );
        }

        if (requestParameters['sharedEvent'] == null) {
            throw new runtime.RequiredError(
                'sharedEvent',
                'Required parameter "sharedEvent" was null or undefined when calling updateSharedEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/shared-event/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SharedEventToJSON(requestParameters['sharedEvent']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedEventFromJSON(jsonValue));
    }

    /**
     * Update a shared event (e.g. race)
     */
    async updateSharedEvent(requestParameters: UpdateSharedEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharedEvent> {
        const response = await this.updateSharedEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
