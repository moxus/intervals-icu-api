/* tslint:disable */
/* eslint-disable */
/**
 * Intervals.icu API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityMini,
  PaceDistancesDTO,
  SportSettings,
} from '../models/index';
import {
    ActivityMiniFromJSON,
    ActivityMiniToJSON,
    PaceDistancesDTOFromJSON,
    PaceDistancesDTOToJSON,
    SportSettingsFromJSON,
    SportSettingsToJSON,
} from '../models/index';

export interface ApplyToActivitiesRequest {
    athleteId: string;
    id: string;
}

export interface CreateSettingsRequest {
    athleteId: string;
    sportSettings: SportSettings;
}

export interface DeleteSettingsRequest {
    athleteId: string;
    id: number;
}

export interface GetSettings1Request {
    athleteId: string;
    id: string;
}

export interface ListMatchingActivitiesRequest {
    athleteId: string;
    id: string;
}

export interface ListPaceDistancesForSportRequest {
    athleteId: string;
    id: string;
}

export interface ListSettingsRequest {
    athleteId: string;
}

export interface UpdateSettingsRequest {
    athleteId: string;
    id: string;
    recalcHrZones: boolean;
    sportSettings: SportSettings;
}

export interface UpdateSettingsMultiRequest {
    athleteId: string;
    recalcHrZones: boolean;
    sportSettings: Array<SportSettings>;
}

/**
 * 
 */
export class SportsApi extends runtime.BaseAPI {

    /**
     * Apply sport settings to matching activities (updates zones), done asynchronously
     */
    async applyToActivitiesRaw(requestParameters: ApplyToActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling applyToActivities().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling applyToActivities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings/{id}/apply`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Apply sport settings to matching activities (updates zones), done asynchronously
     */
    async applyToActivities(requestParameters: ApplyToActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.applyToActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create settings for a sport with default values
     */
    async createSettingsRaw(requestParameters: CreateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SportSettings>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling createSettings().'
            );
        }

        if (requestParameters['sportSettings'] == null) {
            throw new runtime.RequiredError(
                'sportSettings',
                'Required parameter "sportSettings" was null or undefined when calling createSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SportSettingsToJSON(requestParameters['sportSettings']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SportSettingsFromJSON(jsonValue));
    }

    /**
     * Create settings for a sport with default values
     */
    async createSettings(requestParameters: CreateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SportSettings> {
        const response = await this.createSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete sport settings
     */
    async deleteSettingsRaw(requestParameters: DeleteSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling deleteSettings().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings/{id}`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete sport settings
     */
    async deleteSettings(requestParameters: DeleteSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get sport settings by id or activity type e.g. Run, Ride etc.
     */
    async getSettings1Raw(requestParameters: GetSettings1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SportSettings>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling getSettings1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSettings1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings/{id}`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SportSettingsFromJSON(jsonValue));
    }

    /**
     * Get sport settings by id or activity type e.g. Run, Ride etc.
     */
    async getSettings1(requestParameters: GetSettings1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SportSettings> {
        const response = await this.getSettings1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List activities matching the settings
     */
    async listMatchingActivitiesRaw(requestParameters: ListMatchingActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActivityMini>>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling listMatchingActivities().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listMatchingActivities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings/{id}/matching-activities`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityMiniFromJSON));
    }

    /**
     * List activities matching the settings
     */
    async listMatchingActivities(requestParameters: ListMatchingActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActivityMini>> {
        const response = await this.listMatchingActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List pace curve distances
     */
    async listPaceDistancesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaceDistancesDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/pace_distances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaceDistancesDTOFromJSON(jsonValue));
    }

    /**
     * List pace curve distances
     */
    async listPaceDistances(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaceDistancesDTO> {
        const response = await this.listPaceDistancesRaw(initOverrides);
        return await response.value();
    }

    /**
     * List pace curve distances and best effort defaults for the sport
     */
    async listPaceDistancesForSportRaw(requestParameters: ListPaceDistancesForSportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaceDistancesDTO>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling listPaceDistancesForSport().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listPaceDistancesForSport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings/{id}/pace_distances`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaceDistancesDTOFromJSON(jsonValue));
    }

    /**
     * List pace curve distances and best effort defaults for the sport
     */
    async listPaceDistancesForSport(requestParameters: ListPaceDistancesForSportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaceDistancesDTO> {
        const response = await this.listPaceDistancesForSportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List sport settings for the athlete
     */
    async listSettingsRaw(requestParameters: ListSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SportSettings>>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling listSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SportSettingsFromJSON));
    }

    /**
     * List sport settings for the athlete
     */
    async listSettings(requestParameters: ListSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SportSettings>> {
        const response = await this.listSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update sport settings by id or activity type e.g. Run, Ride etc.
     */
    async updateSettingsRaw(requestParameters: UpdateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SportSettings>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling updateSettings().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSettings().'
            );
        }

        if (requestParameters['recalcHrZones'] == null) {
            throw new runtime.RequiredError(
                'recalcHrZones',
                'Required parameter "recalcHrZones" was null or undefined when calling updateSettings().'
            );
        }

        if (requestParameters['sportSettings'] == null) {
            throw new runtime.RequiredError(
                'sportSettings',
                'Required parameter "sportSettings" was null or undefined when calling updateSettings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['recalcHrZones'] != null) {
            queryParameters['recalcHrZones'] = requestParameters['recalcHrZones'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings/{id}`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SportSettingsToJSON(requestParameters['sportSettings']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SportSettingsFromJSON(jsonValue));
    }

    /**
     * Update sport settings by id or activity type e.g. Run, Ride etc.
     */
    async updateSettings(requestParameters: UpdateSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SportSettings> {
        const response = await this.updateSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple sport settings
     */
    async updateSettingsMultiRaw(requestParameters: UpdateSettingsMultiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SportSettings>>> {
        if (requestParameters['athleteId'] == null) {
            throw new runtime.RequiredError(
                'athleteId',
                'Required parameter "athleteId" was null or undefined when calling updateSettingsMulti().'
            );
        }

        if (requestParameters['recalcHrZones'] == null) {
            throw new runtime.RequiredError(
                'recalcHrZones',
                'Required parameter "recalcHrZones" was null or undefined when calling updateSettingsMulti().'
            );
        }

        if (requestParameters['sportSettings'] == null) {
            throw new runtime.RequiredError(
                'sportSettings',
                'Required parameter "sportSettings" was null or undefined when calling updateSettingsMulti().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['recalcHrZones'] != null) {
            queryParameters['recalcHrZones'] = requestParameters['recalcHrZones'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/athlete/{athleteId}/sport-settings`.replace(`{${"athleteId"}}`, encodeURIComponent(String(requestParameters['athleteId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['sportSettings']!.map(SportSettingsToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SportSettingsFromJSON));
    }

    /**
     * Update multiple sport settings
     */
    async updateSettingsMulti(requestParameters: UpdateSettingsMultiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SportSettings>> {
        const response = await this.updateSettingsMultiRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
